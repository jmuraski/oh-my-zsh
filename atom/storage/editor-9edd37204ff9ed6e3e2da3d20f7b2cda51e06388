{"mode":"editor","version":1,"windowDimensions":{"x":412,"y":390,"width":1633,"height":942,"maximized":false},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/jmuraski/Documents/workspace/zeo_server/docs","buffers":[{"text":"# High Level Architecture Document\n<!--TOC-->\n## Overview\nTCF would like to have a new version of a mobile application for their customers to use in banking. There are several designs that we could use to allow for mobile devices to display information to customers and allow them to transact with TCF. This document will lay out one high level approach for the design and the functionality and services required by the application. This document will also be used to start the conversation around required services for the mobile application.\n\n<!--BREAK-->\n## Ideal Architecture\n### Description\nThe ideal architecture for the application has the mobile devices communicating with one server. This server would host numerous endpoints that would be responsible for collecting and aggregating data as well as submitting transactions. In the ideal architecture this server would only communicate with TCF and TCF services would then communicate with all other parties.\n\n![](high_level_arch/ideal_high_level.png)\n\n<!--BREAK-->\n\n### Analysis\nThis is an ideal architecture since it would allow TCF internal servers to manage the relationship with all other parties. By TCF creating these services it would be easy for other areas of the enterprise to utilize these services. Also if these services ever needed changes only one service would need to change where it was calling to. The My Mobile Life servers would be used to throttle calls, isolate TCF from other external entities, provide further aggregation and modifications to the returned data, isolate front-end application from TCF contract changes.\n\n<!--BREAK-->\n## ZEO Mobile Functionality\n### Login\nUsers will need verify their identity. This can be done with a user name and password, using the device identifier, or with a mobile pin.\n### Profile Management\nA user will need to be able to see their user information as well as edit it.\n### Create Account\nA user will need to create an account the first time they access the application. The user will need to be able to provide information to verify their identity and then an account can be set up.\n### Add Card\nA user may have more then one GPR card. They will need a way to add a card to their profile and to have access to this card verified\n### View Account Balances\nA user will need to view all of their accounts and the available balance for each account\n### View Account Transactions\nA user will need to view all of the transactions for an account\n### View Transaction Details\nA user will need to see all the details for a transaction\n### Reload the card\nA user will need to add funds to their accounts.\n### Notify Customer\nUsers need to be notified of changes to their account or when funds are available.\n### Misc\nDepending on the implementation of certain services other services may be required. As an example if Ingo is used for reloading a card, a service may be needed to create an account with Ingo.\n\n## Required Services for ZEO mobile\n### Endpoints\n1. Users\n    1. Get User Profile\n    2. Create Mobile User\n    3. Edit User\n    4. Authenticate User\n    5. Get User Access Token\n2. Accounts\n    1. Get Account List\n    2. Add Account\n    3. Get Account Details\n    4. Remove Account\n    5. Get Transaction Detail\n3. Deposits\n    1. Deposit Funds\n    2. Get Deposit Status\n4. Branches\n    1. Get Branches\n    2. Get Branch Detail\n\n<!--BREAK-->\n\n## Service Assignment\n\n| Endpoint | Function | Owner |\n| -- | :--: | :--: | \n| Users | getProfile | |\n| | createMobileUser | |\n| | edit | |\n| | login | | \n| Token | getToken | | \n| Accounts | getAccountList | | \n| | addAccount | | \n| | getAccountDetails | | \n| | getTransaction | | \n| | removeAccount | | \n| Deposit | createDeposit | | \n| | getDepositDetail | | \n| Branches | getBranches | | \n| | getBranchDetail | | \n| Products | getProducts | | \n| | getProductDetails | |\n| Notifications | sendNotification | | \n[Service Assignment]\n\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":27},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/jmuraski/Documents/workspace/zeo_server/docs/high_level_arch.md","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"620d50bf209e77274e802759ad7ec44ca835a058","deserializer":"TextBuffer"},{"text":"# Server Functions Processes\n## Table of Contents\n* [Register User](#registerUser)\n* [Login](#login)\n* [Login with Refresh Token](#refreshToken)\n* [Secondary Login](#secondaryLogin)\n*  [Get Nonce](#nonce)\n* [Forgot Password](#forgot)\n* [Get Account Detail](#accountDetail)\n* [Get Account List](#accountList)\n* [Create Ingo User](#ingoUser)\n* [Ingo Deposit](#ingoDeposit)\n* [Ingo Notification listener](#ingoNotification)\n* [Get Profile Data](#profile)\n* [Edit Profile](#editProfile)\n* [Logout](#logout)\n* [Branches](#branches)\n\n<!-- BREAK -->\n\n### <a name=\"registerUser\">Register User</a>\n1. Post Request sent with Account Number, Email, First Name, Last Name and phone number and password sent\n2. Look up call made to TCF to verify \n3. Salt Generated\n4. email, password and salt hash, Name, and phone number stored in DB\n5. User Created message returned\n\n### <a name=\"login\">Login</a>\n1. Get Request received by server Base64 Encoded user name and password with SHA256 hash of user name password and a nonce received earlier.\n2. Signature is verified\n3. User name is used to look up salt from DB\n4. Salt is used to generate SHA256 hash of password to verify login\n5. Access token is generated (UUID)\n6. Access token and user name and permissons are stored in cache\n7. Refresh token, device id and device name stored in DB\n8. Access Token and permission level returned\n\n### <a name=\"refreshToken\">Login with Refresh Token</a>\n1. Post request received with user name, device name, refresh token and signature that includes device id\n2. User name and device name are used to look up device id and refresh token from db\n3. signature is verified\n4. refresh token is removed from DB\n5. new refresh token is loaded in DB\n6. Access Token created \n7. access token and user name and permsissions are stored in cache\n8. access token, refresh token and permssions returned\n\n### <a name=\"secondaryLogin\">Secondary Login</a>\n1. Get Request sent with auth header data is user name and password using device id as encryption key and user name and device name as query parameter\n2. User name and device name are used to look up device id and password salt\n3. authentication is decrypted\n4. password and salt are used to verify credentials\n5. access token created\n6. access token user name and permissions are stored in cahce\n7. access token and permssions returned\n\n### <a name=\"nonce\">Get Nonce</a>\n1. Get request for a nonce and a unique id\n2. nonce generated\n3. nonce and unique key stored in cache\n4. nonce returned\n\n### <a name=\"forgot\">Forgot Password</a>\n1. User Name sent to server\n2. User name used to look up email address or phone number of user\n2. Email sent to user or sms text sent to user based on preference\n\n### <a name=\"accountDetail\">Get Account Detail</a>\n1. Access token and account id sent to server\n2. access token is verified against cache\n3. account id used to make request to VISA\n\n### <a name=\"accountList\">Get Account List</a>\n1. Access Token sent to server\n2. Access token verified from cache\n3. User Data looked up in DB\n4. User used to call VISA for account list and balances\n\n### <a name=\"ingoUser\">Create Ingo User</a>\n1. Receive post with data needed to create or bind to existing Ingo User\n2. Verify Token\n3. Make Ingo server authentication call\n4. Search for existing customer\n5. Add New Customer\n6. Add Account to Ingo Account\n6. Store Info Customer Id in DB\n\n### <a name=\"ingoDeposit\">Ingo Deposit</a>\n1. Recieve call for making ingo deposit\n2. Verify access token\n3. Look up Ingo customer id in DB\n4. Authenticate Server with Ingo\n5. Get SSO token from info for custom id\n6. Return SSO token to client\n\n### <a name=\"ingoNotification\">Ingo Notification listener</a>\n1. Post request with ingo notification message sent\n2. user is looked up\n3. push notification sent to apple or google, depending on machine type\n\n### <a name=\"profile\">Get Profile Data</a>\n1. Request made with Access Token\n2. Access Token verified in Cache\n3. User Name used to look up external user id\n4. Call made to TCF to get the User Profile Data\n5. User Profile data masked as needed\n6. User Profile data returned\n\n### <a name=\"editProfile\">Edit Profile</a>\n1. Request made with Access Token and Profile data\n2. Access Token verified in cache\n3. User name used to look up external user id\n4. Call made to TCF to modify user data\n5. 200 Status returned\n\n### <a name=\"logout\">Logout</a>\n1. Receive token in logout request\n2. Remove Token from cache\n\n### <a name=\"logoutRefresh\">Refresh Token Logout</a>\n1. Receive token in logout request\n2. Remove Token from cache\n3. Remove Device Name, Refresh Token and Device ID from DB\n\n### <a name=\"branches\">Branches</a>\n1. Get request with filter and limiting criteria\n2. Call TCF with Data for list of branches\n3. translate data\n4. return list of branches\n\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":32},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/jmuraski/Documents/workspace/zeo_server/docs/serverProcess.md","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"62f367cb282a339b6faccb9b4bededbb744c8b0b","deserializer":"TextBuffer"},{"text":"# Draft\n\n# Server Hosting Recommendation for Mobile Application\n<!--Break-->\n## Table Of Contents\n<!--TOC max2-->\n\n<!--Break-->\n\n## Introduction\nIn order for the mobile application to serve data to TCF customers the mobile application will need to work with services that will have the ability to retrieve this data from TCF as well as other sources (ACI, VISA...). Currently these types of services or applications are being hosted by FIS. FIS has been selected due to their track record in the Banking sector, but there are certain things they did not provide that is typical of the larger cloud IAAS (Infrastructure as a Service) and PAAS (Platform as a Service) providers. The largest and most mature provider is Amazon. In this review we compared what Amazon has to offer when compared to FIS. This review was primarily based on publicly available information. The next steps after this review should be to do further analysis by engaging FIS and Amazon directly.\n\n## Executive Summary\nDevJam believes that Amazon would be a better fit for hosting the Rest Services Application for the mobile application. FIS scored slightly higher on security due to their complete segregation of hardware to its own rack they also scored higher due to their dedicated support and existing VPN. Amazon scored higher on its numerous hosted services, its ease of deployment, the speed for getting environments ready and its ability to automatically scale. While Amazon provides many safeguards that offset FIS dedicated hardware, have a support options, and can have a VPN implemented, FIS did not have the hosted services and could not auto scale. The ability to auto scale is the main element that has us choose Amazon. It is hard to predict usage patterns or how successful a mobile application will be. It is critical that the application can easily grow as the usage of the application increases. This coupled with the ability for the platform to removes servers that are not being used can provide the capability to meet demands, while being less expensive. It is possible that when traffic stabilizes, that FIS could be engaged to get a cost based on our peak volumes and if they were a cheaper option at that point, the application could be moved.\n\n<!--BREAK-->\n\n## Server Requirements\nBelow are the main features that we will be evaluating the providers on and a description of what they are.\n\n### Java and Groovy Support\nThe application will be developed in Java/Groovy. The platform will have to be able to run a war (Web Archive) file.\n\n### Secure connection to TCF\nIn order to communicate with TCF it is required to have a VPN set up or to have a client side certificate.\n\n### Ability to swing & filter network (DDoS) traffic\nA major potential risk to the TCF network is a DDOS (Distributed Denial of Service) attack or other attacks from a dedicated network. When this happens TCF would like to be sure that this type of attack will not impact their internal networks, will not impact the performance of the application and they would also like the ability to selectively shut off offending IP addresses or regions.\n\n### General Security Hardening, Patching and Virus protection\nIt is important that all servers are kept up to date with the latest patches and virus software to ensure that the servers are not vulnerable to known attack vectors or viruses.\n\n### Auto scaling\nSince mobile application can have very variable levels of traffic and TCF is unsure at how successful the application will be, they would like that environment to have the ability to add and remove servers as needed based on characteristics that they choose.\n\n### Ease of Deployment\nTCF would like to move toward a continuous deployment model. For this to happen it an application will need to be able to be deployed to both production and non production environments in an automated and easy way.\n\n### Secondary Services\nAt a minimum this application needs access to a relational data base and a distributed cache. Other services such as monitoring and log aggregation may also be needed. If the provider has access to these services they will make deployment and development easier.\n\n### Set Up Time\nTCF is rapidly deploying software. To facilitate this they will need to set up and remove environments for testing on an as needed basis. The platform should have minimal set up time to enable this ability.\n\n### Support\nTCF is willing to have a dedicated resource to manage these servers, but they will need help on occasion. The platform provider should have support available to help TCF with issues when they occur.\n\n### Cost\nSupport, services, servers all cost money. The overall cost of ownership of the platform is important to TCF.\n\n### Two factor authentication\nTCF wants to enable multi-factor authentication on their mobile application. This may take shape in multiple ways. The chosen platform should not have limitations that will prevent this.\n\n<!--Break-->\n## FIS Evaluation\n\n### Java and Groovy Support\nFIS would allow for different Java version up to 1.8. They also would allow different application servers including WebSphere, WebLogic, JBoss, or just server containers such as Tomcat or Jetty. These items would be selected by TCF.\n\n### Secure connection to TCF\nFIS currently has a VPN set up with TCF. This would not change and would be the form of secure communication between the application and TCF.\n\n### Ability to swing & filter network (DDoS) traffic\nFIS already provides this capability for TCF. They will prevent traffic that appears fraudulent away from the TCF servers. They can also shut off IP addresses or regions if required.\n\n### General Security Hardening, Patching and Virus protection\nFIS maintains the base operating system of windows on the servers. They will also maintain the Linux operating systems that are running on the virtual machines. They would be applying patches to these servers as they are needed. We will need to talk to FIS more to understand how they deploy these patches and if it means any down time for the application. \n\n<!--Break-->\n### Auto scaling\nFIS does not provide automatic scaling. They can provision more CPU or memory to a VM(virtual machine) as needed as long as that physical server has the capacity. In order to increase overall capacity TCF would need to have FIS provide an additional server. TCF would then be paying for that server even during times that traffic was low. We will need to check with FIS to better understand how long it will take to provision new servers. This could be different depending on the type of service the server is providing (DB vs application).\n\n### Ease of Deployment\nFIS needs to be engaged to deploy the application. We may be able to work with FIS to change this, but currently it seems like there is a very formal process to give FIS the application and for them to deploy the new version.\n\n### Secondary Services\nFIS does not provide any secondary services that are preconfigured. TCF could decide to create a DB server and a distributed cache, but these servers would have to be installed and any licenses would need to be purchased.\n\n### Set Up Time\nFIS quoted 6-8 weeks for the environments to be ready to work with. We do not currently know how much additional time is needed for additional servers to be added after the initial build.\n\n### Support\nFIS supports the system at the hardware level, there is a cost for engaging them. We would need to check with FIS to verify if TCF has any direct access to the systems to trouble shoot beyond log data.\n\n### Cost\nCost is unknown at this time. A formal analysis to determine capacity would be required to determine cost.\n\n### Two factor authentication\nIt does not appear that FIS does anything to prevent two factor authentication from being used.\n<!--Break-->\n## Amazon Evaluation\n### Java and Groovy Support\nAmazon Elastic Beanstalk supports Java versions 1.6 or 1.7 and Tomcat servers 7.0.47. If these versions do not work, docker instances with different version could be deployed or EC2 instances could be set up with different versions.\n\n### Secure connection to TCF\nAmazon allows for a Virtual Private cloud and can have a VPN set up. This cost is approximately 35 dollars a month depending on volume. If we decide to use Client Side certificates, custom docker or EC2 instances could be configured to use certificated instead of a VPN.\n\n### Ability to swing & filter network (DDoS) traffic\nAmazon network security would handle Denial of Service attacks. Also any kind of port scanning or other questionable behavior would be blocked by amazon. With the addition of CloudFront it would be possible to deny access to the application based on region. This could also be provided by using Mashery or an alternate CDN such as Akamai.\n\n### General Security Hardening, Patching and Virus protection\nAmazon applies updates to their servers a reboot. Servers would need to be updated to have the most recent versions of software as they were made available. \n\n<!--Break-->\n### Auto scaling\nAmazon allows you to configure your servers to automatically scale as needed. This can be configured based on different elements. The database is also set to handle increasing volumes. The distributed cache does not automatically scale but new instances can be added very quickly if needed.\n\n### Ease of Deployment\nAmazon supports multiple ways for deploying an application. Depending on how this is set up it could be as simple as uploading a file through their console. More then likely this would be a bit more complex since there would be a need to make changes to the data base, but with some effort it would be possible to deploy in an automated fashion with little to no down time for the application.\n\n### Secondary Services\nAmazon provides numerous services. The primary ones we would be using are RDS as a DB, Elastic Cache as a distributed Cache ...\n\n### Set Up Time\nEnvironment set up would take approximately a week depending on how many we would be setting up and how many secondary services we were using. \n\n### Support\nAmazon has paid support tiers, business and enterprise. Depending on the level of support that is needed these are both options.\n\n### Cost\nAmazon has a very defined cost structure that can be review here.\n\n### Two factor authentication\nThere is nothing that Amazon does that would prevent two factor authentication, they even have some secondary services that could support it.\n\n<!--Break-->\n## Additional Cloud Services\nThere are other cloud based services SAAS (Software as a Service) that can enhance the API and make it more secure. We are listing some of the ones that we think could provide the most benefit.\n\n### Mashery\nMashery is a cloud based product that is used to secure HTTP based APIs. They provide API key management, OAuth security of endpoints, throttling, reporting, regional filtering, caching, and other capabilities. These capabilities would provide benefit to both platforms. Both Amazon and FIS would benefit from API Key management and throttling. The caching would be a benefit for FIS, and the regional filtering would be a benefit for Amazon. Overall Mashery could provide great benefit for an API based solution and Mashery or a tool like it (Appigee) should be considered to improve the overall security of the application.\n\n### Threat Metrix\nThreat Metrix is a tool that assists with fraud detection. Threat Metrix has an SDK available for both IOS and Android as well as an HTML based solution. Threat Metrix uses their proprietary technology to fingerprint a device. This fingerprint could be compared to a fingerprint we have on file for the device and would give us extra information to help determine if a request is fraudulent. This data could be coupled with multi-factor authentication to help ensure that requests coming into the bank through the API are legitimate.\n\n<!--Break-->\n### Pingdom\nPingdom is a tool that can be used to monitor the API from outside the existing infrastructure. It is set up to make calls against the API on a regular basis and can then notify the appropriate party if the call does not return the correct response, or it takes longer then it should for a response.\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":36},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/jmuraski/Documents/workspace/zeo_server/docs/ServerRecomendations.md","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"4ac1499db6a370b1b0bf0bd7111eac0e0737f3b4","deserializer":"TextBuffer"},{"text":"# External Dependencies\n\n## Dependency By Service\n### FIS\nOther then the endpoint specific dependencies we will also have a major dependency on FIS. It will depend on what they provide for a DB, Cache, VPN (TCF), application server. These dependencies will not be called out below, since they all endpoints will have some dependency on FIS\n\n| Endpoint | Function | Initial Dependency | Ongoing Dependency | Fallback |\n| -- | :----: | :-----: | :----: | :--: |\n| Users | getProfile | TCF - Get User information for DB | TCF - Get updates to profile | ?? |\n|| createMobileUser | TCF - Verify Account and user data for signup | None | ?? |\n|| edit | none | TCF - Need to push changes back to TCF | ?? |\n|| login | <ul><li>TCF - TCF holds credentials</li><li>ACI - ACI holds credential</li> | <ul><li>TCF - TCF holds credentials</li><li>ACI - ACI holds credential</li> | Setup LDAP server is FIS env or store salted and hashed passwords in the DB with user name at FIS |\n| Token | getToken | none | none | Token Management will be handled by the application |\n| Accounts | getAccountList | | VISA - Calls to VISA will be needed to get the account balances | None |\n| | addAccount | TCF - During account sign up and adding an account we will need to check with TCF that the account can be added and belongs to the user | None | Out of Scope |\n|| getAccountDetails | None | VISA - We will need to call visa to get all the account transactions | None |\n|| remove account    | None | TCF - Depending on if the account needs to be cancelled or just removed from the application | |\n| Remote Deposit Capture | ?? | Ingo - need to set up account for user on ingo | Ingo - Need to make several calls to Ingo in order to use their sdk | none |\n| Branches | getBranches | TCF - Load all branch data to our application | TCF - Update branch information to our database or call them live for branch data and lookup | None |\n\n## Dependencies by Vendor\nLost card, remove card, all card actions are out of scope. Help screens for this providing phone numbers may be in scope.\n\n#### TCF\nFor this document TCF means both TCF as well as Nexxo. There are a few dependencies for TCF focused around the following\n#####  User Sign Up\nTCF will need to provide the data we need to allow a user to sign up to use the application. Depending on what information is needed to create an account, TCF will need to provide a service that would allow us to pass this information to them and for them to verify that it is accurate. They would also need to return an identifier that we could use to associate our user back to their user data. At a minimum this would be needed for associating access tokens to data, but could also be used for retrieving data. This data can be accessed via a live service or if needed a batch could be run to load all the data into our system. A live service is preferable.\n##### User Profile Data\nThe application needs to be able to display User Data back to the user. This data will need to come from TCF. TCF can provide this data live via a service call, or we may need to come up with a batch job that can load the data into our system. Live data would be preferable, with a back up of the data locally, in case of outages or slow connections, but batch data could be a fall back.\n##### User Maintenance\nThe user will be allowed to edit their data. We will need to send these changes to TCF on a regular basis, unless they do not mind the inevitable drift that will happen between the data sets. This can be a live service, which will make resolving conflicts much easier or a batch service, where confilct resolution will be much more complicated.\n##### User Credentials\nWhen a user submits their user name and password the application will need to verify that these are correct. TCF has mentioned that they would like to house these credentials. We would need a service to pass this data to, or a connection to the location where these credentials are housed. There is a potential that these credentials are housed by ACI which would complicate things a bit. As a fallback we could store the credentials either in an LDAP server provided by FIS or in the DB as salted hashes. The downside of this is that the user would have multiple logins for TCF.\n##### Account Verification\nWhen the user wants to add a new account to the application we will need the data of accessible accounts for the user. This can be a live service or a batch job. If this is a job, the customer may be impacted by the latency of the feed for adding accounts.\n\n#### FIS\nDevJam and TCF will be working with FIS on our deployment environment. The backend will need to run on this environment and some of the decisions for the application are dependent on what FIS will provide.\n\n#### INGO\nIngo is the vendor for Remote Depost Capture (RDC) their SDK will be integrated into the application.  We will need the SDK available to flush out how our code will work with the code they provide. The other part of their solution is a REST API. Our backend will need to work with this API in order for the front end to work. We will need to get access to this API as well as any non production environments they have.\n\n#### VISA\nVISA is currently providing the API for accessing General Purpose Reloadable (GPR) card transactions. They may also be providing the interfaces for retrieving customer data and for updating customer data.\n\n#### Periscope\nPeriscope is providing the look, feel and marketing assets for ZEO. These will need to be delivered so the application can be branded. The assets they deliver could potentially impact the UI significantly.","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":40},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/jmuraski/Documents/workspace/zeo_server/docs/ServiceDependency.md","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"0e93713ca569c52a3069b0b7fe8ec1a3c2854b5b","deserializer":"TextBuffer"},{"text":"# Service System Requirements\n\n## Server Types\n* Application Server\n    - Java Application will run on these servers\n    - Server will need access to VPN\n    - Server will need to be able to support client certificates for Visa\n    - Server will need external access to call HTTP/S services on external systems (Ingo, Visa, Mashery...)\n    - Server will need to access DB and Cache\n    - Server will be load balanced\n    - Server will need disaster recovery and Business Continuity Plan\n* Database Server\n    - Server will need to be backed up nightlty\n    - Server will need cold failover\n    - Server will be accessed by Application Server\n    - External tools will need access to DB and DB logs for monitoring\n* Cache Servers\n    - Application server will need access to cache servers\n    - Cache servers will be deployed in twos for redundancy\n* Web Servers\n    - Web Servers will sit in front of Application servers\n\n## FIS Server Needs\n\n| Environment | Application Servers  | Database Servers | Cache Servers | Web Servers |\n| :---------  | :------------------: | :--------------: | :-----------: | :---------: |\n| Production  | 2                    | 1                | 2             | 2           |\n| Failover    | 2                    | 1 <sup> * </sup> | 2             | 2           |\n| Stage       | 2                    | 1 <sup> * </sup> | 2             | 2           |\n| Test        | 1                    | 1 <sup> * </sup> | 1             | 1           |\n\nThe above assumes that the fail over servers are ready to go and that the production database is replicating data to the failover DB. Stage is set up as similar to production to verify that the system works as intended before going live. Test is used to run most testing. Stage does not need to be running all the time, it can be brought up as needed. \n\n<sup> *  These servers could be shared, although steps would be needed to ensure throughput and availability for the Failover schema</sup> \n\n## Amazon Service Needs\n\nEC2\n: The elastic cloud computing envrionment will be used to run the applicaiton, it is possible that elastic beanstalk will be used on top of this platform. CloudFormation could also be used to define server instances.\n\nAmazon SNS\n: This service is used to send SMS texts to devices. Twilio is another alternative\n\nCloudWatch\n: Used to monitor systems\n\nElastic Load Balancing and Autoscaling \n: Load balance traffic across the instances and start up new instances as load demands it\n\nAmazon RDS \n: Database server running MySQL, Oracle or MS Sql Server \n\nElastic Cache \n: Cache servers for caching data\n\nVirtual Private Cloud \n: Provides Isolation from other instances\n\nSimpleDB \n: Due to the limited storage needs of the application it is possible that a no sql solution would work. Simple DB is a no sql solution offered by amazon.\n\nAppStream \n: Allow us to stream data to our clients, rather then a pure HTTP request/response Model\n\nS3 \n: Simple Storage Service allows for files to be stored. This could be used for PDF files or other documents a client may need access to\n\nCloudFront \n: Content Caching and GeoBlocking\n\nAs the design is flushed out it is possible that more services would be added or that certain services would not be needed.\n\n## Third Party Software\n* ThreatMetrix - ThreatMetrix is a cloud based tool to help with device fingerprinting and fraud protection. They have an SDK for both iPhone and Android as well as tools to work with HTML5 applications\n* Mashery or Appigee - Both of these vendors provide a API Key managment and throttling. They may also have some level of geo-blocking and caching.\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":44},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/jmuraski/Documents/workspace/zeo_server/docs/serviceRequirements.md","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"c7e9d7babc540790a3362b341562ba1d17355c6f","deserializer":"TextBuffer"},{"text":"# ZEO Epics\n\n<!--TOC-->\n<!--BREAK-->\n## Overview\nTCF Bank is launching a new product called ZEO. One of the key components of ZEO is General Purpose Reloadable (GPR) card. In order to provide the best experience for TCF customers it was determined that a mobile application to manage their card. At a high level the customer will need to be able to login, view their transactions, and add more funds to their card.\n\n## Users\nIn order to provide benefit to users they need to perform some basic functions to verify who they are and to set up and modify their user profile.\n\n### Create Account\nThe first time the user accesses the application they will not have a profile set up. They will need to provide information to verify who they are and that they are allowed access to the account. Email address will be used as the user name. The user will be presented with an error for the following: \n\n- Email address already in use\n- Password does not meet minimum security requirements\n- Account information provided does not match\n\nOn successful account creation the user will be brought to the landing page\n\n### Login\nA user needs to verify who they are to the application. The user will be presented with a screen where they will enter their user name and password. If there is an error they will be presented with a message otherwise if they successfully login they will be brought to the application landing page.\n\n### Remember Me\nTo make the application easier to use the user will have the ability to have the device remember them and have instant access to the application. This process will utilize device ids, refresh tokens and multiple authorization levels. Data that is not considered highly sensitive will be viewable by the user immediately. Remember me and other security stories will need to be looked into and have sign off by the security group at TCF.\n\n### View Profile\nThe user will have the ability to view their data. Certain information will be considered sensitive and will only be displayed masked unless the user has been granted full access by entering a PIN or their password. The list of fields to be displayed and what data needs to be masked will be determined once the services have been created.\n\n### Edit Profile\nA user will need to be able to edit their personal data to keep it up to date. If the user has not been authorized to edit the information they will be presented with a screen to enter the required information to get full access. Once they have full access they will be able to edit the data. The data will be validated and the user will receive any errors. If successful the user will be brought back to the view profile page.\n\n<!--BREAK-->\n## Accounts\nThe primary function of the application is to work with the user's accounts. These stories will allow  a user to view their account, their transactions, the details of the transactions and to disable an account if the card is lost.\n\n### View Accounts\nThis is currently the landing page for the application. Once the user has been verified they will be able to see a list of their accounts and the balances for those accounts. If the user has no accounts they will be given an option to add one. The user will be able to navigate to the Account detail/Transaction list from here.\n\n### View Transactions\nThis will be a list of the users transactions. Depending on the capability of the back end services the user will be able to sort and filter this data. They will be able to navigate to the detail of a transaction or back to the landing page.\n\n### View Transaction Detail\nThis will show the low level detail of the transaction. The user will be able to navigate back to the transaction list.\n\n### Disable Account\nThe user will be able to disable their account. If the user has lost their card they will be able to disable the account immediately.\n\n### Account Notifications\nIf the user has decided that they would like account notifications they can receive in application notifications for all transactions, for balance limits or other items.\n\n<!--BREAK-->\n## Deposits\nSince these are GPR cards it is important to be able to get funds on the cards. One of the primary ways to do this is by using mobile deposits. These features will allow a user to put funds on the card without going to the bank and to be able to see when the funds are available.\n\n### Add Funds to Card\nThe user will be able to use the camera of their phone to deposit funds on to the card. They will be walked through the experience and presented with errors as they come up.\n\n### View Deposit Status\nThe user will be able to go into the application and view their recent deposits. These deposits will show their status, possible statuses are (Funds Available, Pending, Rejected, Information Required)\n\n### Notification of Deposit Status\nIf the user has set up the preference to be notified they will receive a push notification to their device as the funds become available, Information required, or rejected status changes.\n\n<!--BREAK-->\n## Bank Services\nCustomers may want to visit a branch, an ATM or to sign up for additional services. These stories give the capability to find these services.\n\n### View Branches \nThe user will be able to get a list of branches. They can be looked up by their current location or the user can enter a postal code. The user will be able to specify if they are looking for branches, ATMs or a specific service they are looking for. The user will be able to launch their map application from here to navigate to the bank.\n\n### View Branch Detail\nThe User will need to see additional information about a branch such as hours, services provided, phone numbers. \n\n### Sign up for account\nThe user will be provided links to go the to web pages to sign up for the account type they would like.","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":48},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/jmuraski/Documents/workspace/zeo_server/docs/zeo_epics.md","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"2cd5977910dd24dc0109203d4687fd08e95378e6","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"children":[{"id":24,"items":[{"id":27,"softTabs":true,"displayBuffer":{"id":28,"softWrapped":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/jmuraski/Documents/workspace/zeo_server/docs/high_level_arch.md","tabLength":2,"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":32,"softTabs":true,"displayBuffer":{"id":33,"softWrapped":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/jmuraski/Documents/workspace/zeo_server/docs/serverProcess.md","tabLength":2,"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":36,"softTabs":true,"displayBuffer":{"id":37,"softWrapped":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/jmuraski/Documents/workspace/zeo_server/docs/ServerRecomendations.md","tabLength":2,"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":40,"softTabs":true,"displayBuffer":{"id":41,"softWrapped":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/jmuraski/Documents/workspace/zeo_server/docs/ServiceDependency.md","tabLength":2,"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":44,"softTabs":true,"displayBuffer":{"id":45,"softWrapped":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/jmuraski/Documents/workspace/zeo_server/docs/serviceRequirements.md","tabLength":2,"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":48,"softTabs":true,"displayBuffer":{"id":49,"softWrapped":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/jmuraski/Documents/workspace/zeo_server/docs/zeo_epics.md","tabLength":2,"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemUri":"/Users/jmuraski/Documents/workspace/zeo_server/docs/zeo_epics.md","focused":false,"deserializer":"Pane"},{"id":31,"items":[{"deserializer":"MarkdownPreviewView","filePath":"/Users/jmuraski/Documents/workspace/zeo_server/docs/serverProcess.md","editorId":"32"},{"deserializer":"MarkdownPreviewView","filePath":"/Users/jmuraski/Documents/workspace/zeo_server/docs/ServerRecomendations.md","editorId":"36"},{"deserializer":"MarkdownPreviewView","filePath":"/Users/jmuraski/Documents/workspace/zeo_server/docs/ServiceDependency.md","editorId":"40"},{"deserializer":"MarkdownPreviewView","filePath":"/Users/jmuraski/Documents/workspace/zeo_server/docs/serviceRequirements.md","editorId":"44"},{"deserializer":"MarkdownPreviewView","filePath":"/Users/jmuraski/Documents/workspace/zeo_server/docs/zeo_epics.md","editorId":"48"}],"activeItemUri":"markdown-preview://editor/32","focused":true,"deserializer":"Pane"}],"orientation":"horizontal","deserializer":"PaneAxis"},"activePaneId":31,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-gfm","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/jmuraski/Documents/workspace/zeo_server/docs/high_level_arch.md":1413318461347,"/Users/jmuraski/Documents/workspace/zeo_server/docs/serverProcess.md":1413318476082,"/Users/jmuraski/Documents/workspace/zeo_server/docs/ServerRecomendations.md":1413318480424,"/Users/jmuraski/Documents/workspace/zeo_server/docs/ServiceDependency.md":1413318483867,"/Users/jmuraski/Documents/workspace/zeo_server/docs/serviceRequirements.md":1413318486264,"/Users/jmuraski/Documents/workspace/zeo_server/docs/zeo_epics.md":1413318488905},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":1172196},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/Users/jmuraski/Documents/workspace/zeo_server/docs/serverProcess.md","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}