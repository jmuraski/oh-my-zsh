{"mode":"editor","version":1,"windowDimensions":{"x":263,"y":128,"width":895,"height":643},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/jmuraski/Documents/workspace/zeo_ui/node_modules/grunt-usemin/tasks","buffers":[{"text":"'use strict';\nvar util = require('util');\n\nvar inspect = function (obj) {\n  return util.inspect(obj, false, 4, true);\n};\n\n// Retrieve the flow config from the furnished configuration. It can be:\n//  - a dedicated one for the furnished target\n//  - a general one\n//  - the default one\nvar getFlowFromConfig = function(config, target) {\n  var Flow = require('../lib/flow');\n  var flow = new Flow({ steps: {'js': ['concat', 'uglifyjs'], 'css': ['concat', 'cssmin']}, post: {}});\n  if (config.options && config.options.flow) {\n    if (config.options.flow[target]) {\n      flow.setSteps(config.options.flow[target].steps);\n      flow.setPost(config.options.flow[target].post);\n    } else {\n      flow.setSteps(config.options.flow.steps);\n      flow.setPost(config.options.flow.post);\n    }\n  }\n  return flow;\n};\n\n//\n// Return which locator to use to get the revisioned version (revved) of the files, with, by order of\n// preference:\n// - a map object passed in option (revmap)\n// - a map object produced by grunt-filerev if available\n// - a disk lookup\n//\nvar getLocator = function (grunt, options) {\n  var locator;\n  if (options.revmap) {\n    locator = grunt.file.readJSON(options.revmap);\n  } else if (grunt.filerev && grunt.filerev.summary) {\n    locator = grunt.filerev.summary;\n  } else {\n    locator = function (p) { return grunt.file.expand({filter: 'isFile'}, p); };\n  }\n  return locator;\n};\n\n//\n// ### Usemin\n\n// Replaces references to non-optimized scripts or stylesheets\n// into a set of HTML files (or any templates/views).\n//\n// The users markup should be considered the primary source of information\n// for paths, references to assets which should be optimized.We also check\n// against files present in the relevant directory () (e.g checking against\n// the revved filename into the 'temp/') directory to find the SHA\n// that was generated.\n//\n// Todos:\n// * Use a file dictionary during build process and rev task to\n// store each optimized assets and their associated sha1.\n//\n// #### Usemin-handler\n//\n// A special task which uses the build block HTML comments in markup to\n// get back the list of files to handle, and initialize the grunt configuration\n// appropriately, and automatically.\n//\n// Custom HTML \"block\" comments are provided as an API for interacting with the\n// build script. These comments adhere to the following pattern:\n//\n//     <!-- build:<type> <path> -->\n//       ... HTML Markup, list of script / link tags.\n//     <!-- endbuild -->\n//\n// - type: is either js or css.\n// - path: is the file path of the optimized file, the target output.\n//\n// An example of this in completed form can be seen below:\n//\n//    <!-- build:js js/app.js -->\n//      <script src=\"js/app.js\"></script>\n//      <script src=\"js/controllers/thing-controller.js\"></script>\n//      <script src=\"js/models/thing-model.js\"></script>\n//      <script src=\"js/views/thing-view.js\"></script>\n//    <!-- endbuild -->\n//\n//\n// Internally, the task parses your HTML markup to find each of these blocks, and\n// initializes for you the corresponding Grunt config for the concat / uglify tasks\n// when `type=js`, the concat / cssmin tasks when `type=css`.\n//\n\nmodule.exports = function (grunt) {\n  var FileProcessor = require('../lib/fileprocessor');\n  var RevvedFinder = require('../lib/revvedfinder');\n  var ConfigWriter = require('../lib/configwriter');\n  var _ = grunt.util._;\n\n  grunt.registerMultiTask('usemin', 'Replaces references to non-minified scripts / stylesheets', function () {\n    var debug = require('debug')('usemin:usemin');\n    var options = this.options({\n      type: this.target\n    });\n\n    debug('Looking at %s target', this.target);\n    var patterns;\n\n    // Check if we have a user defined pattern\n    if (options.patterns && options.patterns[this.target]) {\n      debug('Using user defined pattern for %s',this.target);\n      patterns = options.patterns[this.target];\n    }\n    else\n    {\n      debug('Using predefined pattern for %s',this.target);\n      patterns = options.type;\n    }\n\n    // var locator = options.revmap ? grunt.file.readJSON(options.revmap) : function (p) { return grunt.file.expand({filter: 'isFile'}, p); };\n    var locator = getLocator(grunt, options);\n    var revvedfinder = new RevvedFinder(locator);\n    var handler = new FileProcessor(patterns, revvedfinder, function (msg) { grunt.log.writeln(msg);});\n\n    this.files.forEach(function (fileObj) {\n      var files = grunt.file.expand({nonull: true}, fileObj.src);\n      files.forEach(function (filename) {\n        debug('looking at file %s', filename);\n\n        grunt.log.subhead('Processing as ' + options.type.toUpperCase() + ' - ' + filename);\n\n        // Our revved version locator\n        var content = handler.process(filename, options.assetsDirs);\n\n        // write the new content to disk\n        grunt.file.write(filename, content);\n      });\n    });\n  });\n\n  grunt.registerMultiTask('useminPrepare', 'Using HTML markup as the primary source of information', function () {\n    var options = this.options();\n    // collect files\n    var dest = options.dest || 'dist';\n    var staging = options.staging || '.tmp';\n    var root = options.root;\n\n    grunt.log\n      .writeln('Going through ' + grunt.log.wordlist(this.filesSrc) + ' to update the config')\n      .writeln('Looking for build script HTML comment blocks');\n\n    var flow = getFlowFromConfig(grunt.config('useminPrepare'), this.target);\n\n    var c = new ConfigWriter( flow, {root: root, dest: dest, staging: staging} );\n\n    var cfgNames = [];\n    c.stepWriters().forEach(function(i) { cfgNames.push(i.name);});\n    c.postWriters().forEach(function(i) { cfgNames.push(i.name);});\n    var gruntConfig = {};\n    _.each(cfgNames, function(name) {\n      gruntConfig[name] = grunt.config(name) || {};\n    });\n\n    this.filesSrc.forEach(function (filepath) {\n      var config;\n      try {\n        config = c.process(filepath, grunt.config());\n      }\n      catch(e) {\n        grunt.fail.fatal(e);\n      }\n\n      _.each(cfgNames, function(name) {\n        gruntConfig[name] = grunt.config(name) || {};\n        grunt.config(name, _.extend(gruntConfig[name], config[name]));\n      });\n\n    });\n\n    // log a bit what was added to config\n    grunt.log.subhead('Configuration is now:');\n    _.each(cfgNames, function(name) {\n      grunt.log.subhead('  ' + name + ':').writeln('  ' + inspect(grunt.config(name)));\n    });\n  });\n};\n","markers":{"markers":{"1":{"id":1,"range":[[79,11],[79,19]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":10,"autoscroll":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/jmuraski/Documents/workspace/zeo_ui/node_modules/grunt-usemin/tasks/usemin.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"704882c042c7b49a22145b27e72e9d9a28a077f1","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":7,"items":[{"id":10,"softTabs":true,"displayBuffer":{"id":11,"softWrap":false,"editorWidthInChars":null,"scrollTop":2034,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/jmuraski/Documents/workspace/zeo_ui/node_modules/grunt-usemin/tasks/usemin.js","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/jmuraski/Documents/workspace/zeo_ui/node_modules/grunt-usemin/tasks/usemin.js","focused":true,"deserializer":"Pane"},"activePaneId":7,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-javascript"],"deserializer":"Workspace"},"packageStates":{"find-and-replace":{"viewState":{"findHistory":["build:js"],"replaceHistory":[],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}}},"fuzzy-finder":{"/Users/jmuraski/Documents/workspace/zeo_ui/node_modules/grunt-usemin/tasks/usemin.js":1410197360781},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":14750316},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/Users/jmuraski/Documents/workspace/zeo_ui/node_modules/grunt-usemin/tasks/usemin.js","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}