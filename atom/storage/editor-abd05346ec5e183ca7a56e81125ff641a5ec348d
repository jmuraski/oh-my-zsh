{"mode":"editor","version":1,"windowDimensions":{"x":250,"y":250,"width":2217,"height":1100,"maximized":false},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"paths":["/Users/jmuraski/Documents/workspace/commerceEverywhere"],"buffers":[{"text":"Commerce Anywhere Frontend Project\n====================\n\nCommerce Anywhere Front-end is the UI applicaiton for Commerce Everywhere.  It is a standalone Clientside MVC framework that relies on\nRest based web services for all of it's data needs.\n\nClone the project and setup git flow\n\n    * install git flow if you haven't already\n        * brew install git-flow\n    * optionally install the git-flow zsh plugin\n        * in .zshrc add git-flow to list of plugins: `plugins=(git git-flow)`\n    * git clone git@github.com:bestbuyremix/commerce_anywhere_fe.git\n    * run `git flow init` and accept all the defaults\n    * checkout develop\n        * git checkout develop\n    * see the following urls for more info on using git flow:\n        * http://vimeo.com/16018419\n        * http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/\n        * https://github.com/nvie/gitflow\n\nSetup remote repos for DEV and UAT\n    * git remote add dev ec2-user@ec2-54-245-110-32.us-west-2.compute.amazonaws.com:commerce_anywhere_fe.git\n    * git remote add uat ec2-user@ec2-54-214-28-35.us-west-2.compute.amazonaws.com:commerce_anywhere_fe.git\n\nThis application requires the use of Yeoman and Coffee-Script\n\nUse HomeBrew to install Node (brew node) this should install npm, if it does not run curl https://npmjs.org/install.sh | sh\n\nTo install Yeoman and Coffee-Script, have node.js installed and NPM.\n\nIn Terminal execute npm install -g yo grunt-cli bower coffee-script\n\nOnce these are installed run the following commands at the root of the project\nnpm install\nbower install --dev\n\nThis should get the project set up and ready to go.  There is a .rvmrc file that is setting the env to ruby-1.9.3-p286@yeoman, this configuration has compass installed which is required for the server to run.\n\nTo Deploy the code to artifactory you can run the make_tar file.  ./make_tar 1.0.1-SNAPSHOT for a snapshot build or ./make_tar 1.0.1 for a build\n<br>\nTo create the file but not push it to artifactory you can run ./make_tar 1.0.1 -file\n<br>\nIn order to publish the tgz file you will need to have your settings.xml for maven configured with the following\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<settings xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\" xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n  <servers>\n    <server>\n      <username>joe.muraski</username>\n      <password>{{Your Password Hash from Artifactory}}</password>\n      <id>code.bestbuy.com</id>\n    </server>\n  </servers>\n</settings>\n```\n<br>\nDeployment Validation<br>\n<br><a href='https://code.bestbuy.com/wiki/pages/viewpage.action?pageId=17547029'>Release Management FAQ</a>\n<br><a href='https://code.bestbuy.com/wiki/display/SOLUTIONS/Day+time+Validation+-+DTV+-+One+stop+shop'>Pilot Server Stuff</a>\n\n<br><a href='http://images-qa.bestbuy.com/BestBuy_US/commerceeverywhere/index.html'>QA1 Static</a>\n<br><a href='http://images-qa2.bestbuy.com/BestBuy_US/commerceeverywhere/index.html'>QA2 Static</a>\n<br><a href='http://images-qa3.bestbuy.com/BestBuy_US/commerceeverywhere/index.html'>QA3 Static</a>\n<br><a href='http://plt-images-pls.bestbuy.com/BestBuy_US/commerceeverywhere/index.html'>Pilot Static</a>\n\n\n<br><a href='https://commerce-qa.bestbuy.com/commerceui/api/product/9480411?partnerId=cePartner&pid=&apikey=654321'>QA1 Backend</a>\n<br><a href='https://commerce-qa2.bestbuy.com/commerceui/api/product/9480411?partnerId=cePartner&pid=&apikey=654321'>QA2 Backend</a>\n<br><a href='https://commerce-qa3.bestbuy.com/commerceui/api/product/9480411?partnerId=cePartner&pid=&apikey=654321'>QA3 Backend</a>\n\n<br><a href='https://commerce-ssl.bestbuy.com/commerceui/api/product/9480411;jsessionid=.bbcomp-app40-101?partnerId=cePartner'>Pilot 1 Backend</a>\n<br><a href='https://commerce-ssl.bestbuy.com/commerceui/api/product/9480411;jsessionid=.bbcomp-app40-102?partnerId=cePartner'>Pilot 2 Backend</a>\n\n<br>\nRestEndpointService ENV SHA3 Generation<br>\nLoad the app in a browser, open a javascript console and run:\n- CryptoJS.SHA3(\"http(s)://<new_env>.bestbuy.com/commerceui/api\").toString();\npaste the new value into the restEndpointService.coffee script\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":4},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/jmuraski/Documents/workspace/commerceEverywhere/README.md","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"9623456ceb0a6324a2529a0d9aac2206bf4d73d0","deserializer":"TextBuffer"},{"text":"'use strict';\nvar lrSnippet = require('grunt-contrib-livereload/lib/utils').livereloadSnippet;\nvar proxySnippet = require('grunt-connect-proxy/lib/utils').proxyRequest\nvar mountFolder = function (connect, dir) {\n  return connect.static(require('path').resolve(dir));\n};\n\nmodule.exports = function (grunt) {\n  // load all grunt tasks\n  require('matchdep').filterDev('grunt-*').forEach(grunt.loadNpmTasks);\n\n  // configurable paths\n  var yeomanConfig = {\n    app: 'app',\n    dist: 'dist',\n    app_external: 'app_external',\n    partner_mock: 'partner_mock'\n  };\n\n  try {\n    yeomanConfig.app = require('./bower.json').appPath || yeomanConfig.app;\n  } catch (e) {}\n\n  grunt.initConfig({\n    yeoman: yeomanConfig,\n    watch: {\n      coffee: {\n        files: ['<%= yeoman.app %>/scripts/{,*/}*.coffee'],\n        tasks: ['coffee:dist']\n      },\n      coffeeTest: {\n        files: ['test/spec/{,*/}*.coffee'],\n        tasks: ['coffee:test']\n      },\n      html2js: {\n        files: ['app/views/partials/*.html'],\n        tasks: ['html2js']\n      },\n      compass: {\n        files: ['<%= yeoman.app %>/styles/{,*/}*.{scss,sass}'],\n        tasks: ['compass']\n      },\n      livereload: {\n        files: [\n          '<%= yeoman.app %>/{,*/}*.html',\n          '{.tmp,<%= yeoman.app %>}/styles/{,*/}*.css',\n          '{.tmp,<%= yeoman.app %>}/scripts/{,*/}*.js',\n          '<%= yeoman.app %>/images/{,*/}*.{png,jpg,jpeg,gif,webp,svg}',\n          '{.tmp,<%= yeoman.app_external %>}/partner/scripts/{,*/}*.js',\n          '<%= yeoman.app_external %>/partner/images/{,*/}*.{png,jpg,jpeg,gif,webp,svg}',\n          '{.tmp,<%= yeoman.partner_mock %>}/cnet/{,*/}*',\n          '{.tmp,<%= yeoman.partner_mock %>}/gdgt/{,*/}*',\n          '{.tmp,<%= yeoman.partner_mock %>}/demo/{,*/}*'\n        ],\n        tasks: ['livereload']\n      }\n    },\n    connect: {\n      options: {\n        port: 9000,\n        // Change this to '0.0.0.0' to access the server from outside.\n        hostname: 'localhost'\n      },\n      proxies: [\n        {\n          context: '/commerceui/api',\n          host: 'localhost',\n          port: '8080'\n        }\n      ],\n      livereload: {\n        options: {\n          middleware: function (connect) {\n            return [\n              lrSnippet,\n              mountFolder(connect, yeomanConfig.app),\n              mountFolder(connect, yeomanConfig.app_external),\n              mountFolder(connect, yeomanConfig.partner_mock),\n              mountFolder(connect, '.tmp'),\n              proxySnippet\n            ];\n          }\n        }\n      },\n      test: {\n        options: {\n          port: 9000,\n          middleware: function (connect) {\n            return [\n              mountFolder(connect, '.tmp'),\n              mountFolder(connect, 'test')\n            ];\n          }\n        }\n      }\n    },\n    open: {\n      server: {\n        url: 'http://localhost:<%= connect.options.port %>/#/8240103?partnerId=cePartner&mock=true'\n      }\n    },\n    clean: {\n      dist: {\n        files: [{\n          dot: true,\n          src: [\n            '.tmp',\n            '<%= yeoman.dist %>/*',\n            '!<%= yeoman.dist %>/.git*',\n            '<%= yeoman.app %>/scripts/**/*.js',\n            '<%= yeoman.app_external %>/**/*.js',\n            'test/**/*.js',\n            '!test/e2e/protractor/config/*.js'\n          ]\n        }]\n      },\n      server: '.tmp'\n    },\n    jshint: {\n      options: {\n        jshintrc: '.jshintrc'\n      },\n      all: [\n        'Gruntfile.js',\n        '<%= yeoman.app %>/scripts/{,*/}*.js'\n      ]\n    },\n    coffeelint: {\n      app: ['app/**/*.coffee'],\n      tests: ['tests/**/*.coffee'],\n      options: {\n        'indentation': {'level': 'error'},\n        'max_line_length': {\n          value: 150,\n          level: 'warn',\n          message: 'Line exceeds maximum allowed length'},\n        'camel_case_classes': {'level': 'error'},\n        'not_trailing_semicolons': {'level': 'error'},\n        'no_tabs': {'level': 'error'},\n        'no_trailing_whitespace': {'level': 'error'},\n        'no_throwing_strings': {'level': 'error'},\n        'no_backticks': {'level': 'error'},\n        'line_endings': {'level': 'error'},\n        'no_stand_alone_at': {'level': 'error'}\n      }\n    },\n    karma: {\n      unit: {\n        configFile: 'karma.conf.js',\n        singleRun: true\n      }\n    },\n    coffee: {\n      dist: {\n        files: [{\n          expand: true,\n          src: '<%= yeoman.app %>/scripts/{,**/}*.coffee',\n          dest: '',\n          ext: '.js'\n        }]\n      },\n      test: {\n        files: [{\n          expand: true,\n          src: 'test/{,**/}*.coffee',\n          dest: '',\n          ext: '.js'\n        }]\n      },\n      app_external: {\n        files: [{\n          expand: true,\n          src: '<%= yeoman.app_external %>/partner/scripts/{,**/}*.coffee',\n          dest: '',\n          ext: '.js'\n        }]\n      }\n    },\n    compass: {\n      options: {\n        sassDir: '<%= yeoman.app %>/styles',\n        cssDir: '.tmp/styles',\n        imagesDir: '<%= yeoman.app %>/images',\n        javascriptsDir: '<%= yeoman.app %>/scripts',\n        fontsDir: '<%= yeoman.app %>/styles/fonts',\n        importPath: '<%= yeoman.app %>/components',\n        relativeAssets: true\n      },\n      dist: {},\n      server: {\n        options: {\n          debugInfo: true\n        }\n      }\n    },\n    concat: {\n      dist: {\n        files: {\n          '<%= yeoman.dist %>/scripts/scripts.js': [\n            '.tmp/scripts/{,*/}*.js',\n            '<%= yeoman.app %>/scripts/{,*/}*.js'\n          ]\n        }\n      }\n    },\n    useminPrepare: {\n      html: '<%= yeoman.app %>/index.html',\n      options: {\n        dest: '<%= yeoman.dist %>'\n      }\n    },\n    usemin: {\n      html: ['<%= yeoman.dist %>/{,*/}*.html'],\n      css: ['<%= yeoman.dist %>/styles/{,*/}*.css'],\n      options: {\n        dirs: ['<%= yeoman.dist %>']\n      }\n    },\n    imagemin: {\n      dist: {\n        files: [{\n          expand: true,\n          cwd: '<%= yeoman.app %>/images',\n          src: '{,*/}*.{png,jpg,jpeg}',\n          dest: '<%= yeoman.dist %>/images'\n        }]\n      }\n    },\n    cssmin: {\n      dist: {\n        files: {\n          '<%= yeoman.dist %>/styles/main.css': [\n            '.tmp/styles/{,*/}*.css',\n            '<%= yeoman.app %>/styles/{,*/}*.css'\n          ]\n        }\n      }\n    },\n    htmlmin: {\n      dist: {\n        options: {\n          /*removeCommentsFromCDATA: true,\n          // https://github.com/yeoman/grunt-usemin/issues/44\n          //collapseWhitespace: true,\n          collapseBooleanAttributes: true,\n          removeAttributeQuotes: true,\n          removeRedundantAttributes: true,\n          useShortDoctype: true,\n          removeEmptyAttributes: true,\n          removeOptionalTags: true*/\n        },\n        files: [{\n          expand: true,\n          cwd: '<%= yeoman.app %>',\n          src: ['*.html', 'views/{,*/}*.html'],\n          dest: '<%= yeoman.dist %>'\n        }]\n      }\n    },\n    cdnify: {\n      dist: {\n        html: ['<%= yeoman.dist %>/*.html']\n      }\n    },\n    ngmin: {\n      dist: {\n        files: [{\n          expand: true,\n          cwd: '<%= yeoman.dist %>/scripts',\n          src: '*.js',\n          dest: '<%= yeoman.dist %>/scripts'\n        }]\n      },\n      app_external: {\n        files: [{\n          expand: true,\n          cwd: '<%= yeoman.dist %>/partner/scripts',\n          src: '*.js',\n          dest: '<%= yeoman.dist %>/partner/scripts'\n        }]\n      }\n    },\n    uglify: {\n      dist: {\n        files: {\n          '<%= yeoman.dist %>/scripts/scripts.js': [\n            '<%= yeoman.dist %>/scripts/scripts.js'\n          ]\n        }\n      },\n      app_external: {\n        files: {\n          '<%= yeoman.dist %>/partner/scripts/ce-checkout-0_0_1.js': [\n            '<%= yeoman.dist %>/partner/scripts/ce-checkout-0_0_1.js'\n          ]\n        }\n      }\n    },\n    rev: {\n      dist: {\n        files: {\n          src: [\n            '<%= yeoman.dist %>/scripts/{,*/}*.js',\n            '<%= yeoman.dist %>/styles/{,*/}*.css',\n            '<%= yeoman.dist %>/styles/fonts/*'\n          ]\n        }\n      }\n    },\n    copy: {\n      dist: {\n        files: [{\n          expand: true,\n          dot: true,\n          cwd: '<%= yeoman.app %>',\n          dest: '<%= yeoman.dist %>',\n          src: [\n            '*.{ico,txt}',\n            '.htaccess',\n            'components/**/*',\n            'images/{,*/}*.{gif,webp}',\n            'styles/fonts/*',\n            'partner/*',\n            'mobile/**/*',\n            'mobile_v2/**/*',\n            'mobile_address/**/*',\n            'mobile_creditcard/**/*'\n          ]\n        }]\n      },\n      app_external: {\n        files: [\n          {\n            expand: true,\n            dot: true,\n            cwd: '<%= yeoman.app_external %>',\n            dest: '<%= yeoman.dist %>',\n            src: [\n              'partner/images/{,**/}*.{gif,png}'\n            ]\n          },\n          {\n            expand: true,\n            dot: true,\n            cwd: '<%= yeoman.app_external %>',\n            dest: '<%= yeoman.dist %>',\n            src: [\n              'partner/{,**/}*.js'\n            ]\n          }\n        ]\n      },\n      ext: {\n        files: [\n          {\n            expand: true,\n            dot: true,\n            cwd: 'app',\n            dest: '<%= yeoman.dist %>',\n            src: [\n              'ext/*'\n            ]\n          }\n        ]\n      },\n      mock: {\n        files: [\n          {\n            expand: true,\n            dot: true,\n            cwd: '<%= yeoman.partner_mock %>',\n            dest: '<%= yeoman.dist %>',\n            src: [\n              'cnet/*',\n              'gdgt/*',\n              'demo/*'\n            ]\n          }\n        ]\n      }\n    },\n    html2js: {\n      options:{\n        base: \"app/views\"\n      },\n      main: {\n        src: ['app/views/partials/*.html'],\n        dest:'app/scripts/templates.js'\n      }\n    },\n    prompt: {\n     buildDist: {\n       options: {\n         questions: [\n           {\n             config: 'buildDist.build.choice',\n             type: 'list',\n             message: \"Which version would you like to use\",\n             default: 'current',\n             choices: [\n               {value: 'current', name: \"Current Version: <%= grunt.config('application.version.current') %>\"}, {value: 'bump', name: \"Bump Version to <%= grunt.config('application.version.bumped') %>\"}, {name: 'New Version', value: 'new'}\n             ]\n           },\n           {\n             config: 'buildDist.build.customVersion',\n             type: 'input',\n             message: 'Version Number: ',\n             when: function(answers){\n               return answers['buildDist.build.choice'] === 'new';\n             }\n           },\n           {\n             config: 'buildDist.git.commit',\n             type: 'confirm',\n             message: 'Commit changes to git?',\n             default: true,\n             when: function(answers){\n              return answers['buildDist.build.choice'] !== 'current';\n             }\n           },\n           {\n             config: 'buildDist.upload',\n             type: 'confirm',\n             message: 'Upload File to Maven?',\n             default: false\n           }\n         ]\n       }\n     }\n    },\n      protractor: {\n          options: {\n              keepAlive: true, // If false, the grunt process stops when the test fails.\n              args: {\n                  // Arguments passed to the command\n              }\n          },\n          ispu: {\n              configFile: \"test/e2e/protractor/config/protractor.ispu.conf.js\"\n          },\n          sth: {\n              configFile: \"test/e2e/protractor/config/protractor.sth.conf.js\"\n          },\n          ispusth: {\n              configFile: \"test/e2e/protractor/config/protractor.ispusth.conf.js\"\n          },\n          sauceChrome: {\n            configFile: \"test/e2e/protractor/config/protractor.sauce.chrome.conf.js\"\n          },\n          sauceFirefox: {\n            configFile: \"test/e2e/protractor/config/protractor.sauce.firefox.conf.js\"\n          },\n          sauceIE: {\n            configFile: \"test/e2e/protractor/config/protractor.sauce.ie.conf.js\"\n          },\n          sauceSafari: {\n            configFile: \"test/e2e/protractor/config/protractor.sauce.safari.conf.js\"\n          },\n          sauceAndroid: {\n            configFile: \"test/e2e/protractor/config/protractor.sauce.android.conf.js\"\n          },\n          sauceIPad: {\n            configFile: \"test/e2e/protractor/config/protractor.sauce.ipad.conf.js\"\n          }\n      },\n      concurrent: {\n          local: ['protractor:ispu', 'protractor:sth', 'protractor:ispusth'],\n          sauceA: ['protractor:sauceChrome', 'protractor:sauceFirefox'],\n          sauceB: ['protractor:sauceIE', 'protractor:sauceSafari'],\n          sauceC: ['protractor:sauceAndroid', 'protractor:sauceIPad']\n      }\n  });\n\n  grunt.renameTask('regarde', 'watch');\n\n  grunt.registerTask('server', [\n    'clean:server',\n    'coffee:dist',\n    'html2js',\n    'compass:server',\n    'configureProxies',\n    'livereload-start',\n    'connect:livereload',\n    'open',\n    'watch'\n  ]);\n\n  grunt.registerTask('test', [\n    'clean:server',\n    'coffee',\n    'compass',\n    'connect:test',\n    'karma'\n  ]);\n\n  grunt.registerTask('build', [\n    'clean:dist',\n   // 'jshint',\n   'coffee',\n   'html2js',\n    'test',\n    'coffeelint',\n    'compass:dist',\n    'useminPrepare',\n    'imagemin',\n    'cssmin',\n    'htmlmin',\n    'concat',\n    'copy',\n    'ngmin',\n    'uglify',\n    'rev',\n    'usemin'\n  ]);\n\n  grunt.registerTask('buildDev', [\n    'clean:dist',\n    'coffee',\n    'html2js',\n    'compass:dist',\n    'useminPrepare',\n    'imagemin',\n    'cssmin',\n    'htmlmin',\n    'concat',\n    'copy',\n    'ngmin',\n    'uglify',\n    'rev',\n    'usemin'\n  ]);\n\n  grunt.registerTask('buildExternal', [\n    'coffee:app_external',\n    'copy:app_external',\n    'ngmin:app_external',\n    'uglify:app_external'\n  ]);\n\n  grunt.registerTask('default', ['server']);\n\n  grunt.registerTask('buildDist', 'Builds the file for distribution', function(){\n    var packageFile = grunt.file.readJSON('package.json');\n    var version = packageFile.version;\n    grunt.config('application.version.current', version);\n    grunt.config('application.version.bumped', version.split(\".\")[0] + \".\" + version.split(\".\")[1] + \".\" + (1 + parseInt(version.split(\".\")[2])));\n    grunt.task.run(['prompt:buildDist', 'updateFileVersions', 'build', 'createTar']);\n  });\n\n  grunt.registerTask('updateFileVersions', 'Updates the version of the files based on answers to the prompt:buildDist', function(){\n    grunt.log.writeln(\"Upload \" + grunt.config('buildDist.upload'));\n    if(grunt.config('buildDist.build.choice') !== 'current'){\n      if(grunt.config('buildDist.build.choice') === 'bump'){\n        var newVersion = grunt.config('application.version.bumped');\n      } else {\n        var newVersion = grunt.config('buildDist.build.customVersion')\n      }\n      var packageFile = grunt.file.readJSON('package.json');\n      var currentVersion = packageFile.version;\n      packageFile.version = newVersion;\n      grunt.file.write('package.json', JSON.stringify(packageFile, null, 2));\n      var bowerFile = grunt.file.readJSON('bower.json');\n      bowerFile.version = newVersion;\n      grunt.file.write('bower.json', JSON.stringify(bowerFile, null, 2));\n      var indexFile = grunt.file.read(\"app/index.html\");\n      var reg = /<meta name=\"version\" content=\"(.)*>/;\n      var replaced = indexFile.replace(reg, '<meta name=\"version\" content=\"' + newVersion +'\">');\n      grunt.file.write('app/index.html', replaced);\n\n\n      if(grunt.config('buildDist.git.commit') === true){\n        var done = this.async();\n        require('child_process').exec('git add package.json bower.json app/index.html', function(error, stdout, stderror){\n          grunt.log.write(stdout);\n          require('child_process').exec('git commit -m \"modified application version from ' + currentVersion + ' to ' + newVersion + '\"', function(error, ostdout, ostderror){\n            grunt.log.write(ostdout);\n            done(true);\n          });\n        });\n      }\n    }\n  });\n\n  grunt.registerTask('createTar', 'Calls bash script to create the tar file and uploads if set', function(){\n    var packageFile = grunt.file.readJSON('package.json');\n    var commandArgs = [packageFile.version];\n\n    if(grunt.config('buildDist.upload') === true){\n      commandArgs = [packageFile.version, -upload];\n    }\n\n    var done = this.async();\n    require('child_process').execFile(process.cwd() + '/make_tar', commandArgs, function(error, stdout, stderror){\n      grunt.log.write(stdout);\n      done(true);\n    });\n  });\n};\n","markers":{"markers":{"1":{"id":1,"range":[[572,0],[573,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":8,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/jmuraski/Documents/workspace/commerceEverywhere/Gruntfile.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"213e57fb954a16b2e367377711ce2ed484c1d4fb","deserializer":"TextBuffer"},{"text":"'use strict'\n\nangular.module('commerceEverywhereApp')\n  .factory 'restEndpointService',\n    [ '$location', '$routeParams', '$log',\n      ($location, $routeParams, $log) ->\n\n        defaultEndpoint = '/commerceui/api'\n\n        validEndpointOverrides =\n          dev: 'b9f43074146fa553e7d17cb45b75a5d719eff8eccb22ba290ea91db04178531f8f00a4498e3c6bd02eec4b751034f2720139d2872c4d890c3abaa24bf81a1cea'\n          stg: '58c813c6e8e819289f995cee5be45f7df6c3b57703a7c6e24480735d192c797bc01af57d286fcd38f7599268bbf60bb0fa5ffd185b2a241a06806b21c8e298ff'\n          qa1: 'e7dc46b2d78690575a884c3ab29d122f6439136626f403b50398ce5b195a96d4aa4dbea7c99bb7f2aa4fccf91e3216b940196fac9d83a2f589e329172920f5cb'\n          qa2: '0b0f3b17b1eb4ac1264170a602590709aa8672b9aba0e67ba4281bcb9412b590fc35724abea024eb1a04b56860e7fc165c67b4a1c06b1aa66e8befc086d31508'\n          qa3: 'bebc3784127ed537dc054185c81bfb946796850fb5f782bd275c428a19641bf62c53b78b7160c7f44d8b176437b7069584717276587b724ca017c83ca65fabf4'\n          prd: '2b831db1b5dffe1e1c86747d7ec50c7c3d0c3b633144269b6fc58aa97c7d7c06a56cb9039b0a246940bc4a02eb8845516e005a77fef4323abce0303d7691e2f5'\n\n        isProdEnv = () ->\n          $location.host() is 'commerce-ssl.bestbuy.com' and not $routeParams.target?\n\n        {\n          getEndpoint: () ->\n            if $routeParams.env?\n              $log.debug(\"Route Params ENV: #{$routeParams.env}\")\n              if _.contains(_.values(validEndpointOverrides), CryptoJS.SHA3($routeParams.env).toString())\n                $log.debug('Route Params ENV was valid, using as endpoint')\n                $routeParams.env\n              else\n                $log.debug('Route Params ENV was NOT valid, using default endpoint')\n                defaultEndpoint\n            else\n              defaultEndpoint\n\n          getTargetBackend: () ->\n            if $routeParams.target? then \";jsessionid=#{$routeParams.target}\" else ''\n\n          isProdEnv: isProdEnv\n\n          getLinkshareMid: () ->\n            if isProdEnv() then '38606' else '24513'\n\n          getAnalyticServiceEnv: () ->\n            if isProdEnv() then 'prod' else 'dev'\n        }\n    ]\n","markers":{"markers":{"1":{"id":1,"range":[[22,28],[22,31]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":12,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/jmuraski/Documents/workspace/commerceEverywhere/app/scripts/services/restEndpointService.coffee","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"8142f933e1610bafff2bd7fe518e07a61c330a91","deserializer":"TextBuffer"},{"text":"ce = {}\nce.static = {}\nce.static.states =\n  [\n    'AL'\n    'AK'\n    'AP'\n    'AE'\n    'AA'\n    'AZ'\n    'AR'\n    'CA'\n    'CO'\n    'CT'\n    'DE'\n    'FL'\n    'GA'\n    'GU'\n    'HI'\n    'ID'\n    'IL'\n    'IN'\n    'IA'\n    'KS'\n    'KY'\n    'LA'\n    'ME'\n    'MD'\n    'MA'\n    'MI'\n    'MN'\n    'MS'\n    'MO'\n    'MT'\n    'NE'\n    'NV'\n    'NH'\n    'NJ'\n    'NM'\n    'NY'\n    'NC'\n    'ND'\n    'OH'\n    'OK'\n    'OR'\n    'PA'\n    'RI'\n    'SC'\n    'SD'\n    'TN'\n    'TX'\n    'UT'\n    'VT'\n    'VA'\n    'VI'\n    'WA'\n    'WV'\n    'WI'\n    'WY'\n  ]\n\nce.static.months =\n  [\n    { label: 'January', value: '01' }\n    { label: 'February', value: '02' }\n    { label: 'March', value: '03' }\n    { label: 'April', value: '04' }\n    { label: 'May', value: '05' }\n    { label: 'June', value: '06' }\n    { label: 'July', value: '07' }\n    { label: 'August', value: '08' }\n    { label: 'September', value: '09' }\n    { label: 'October', value: '10' }\n    { label: 'November', value: '11' }\n    { label: 'December', value: '12' }\n  ]\n\nce.static.years =\n  [\n    '2013'\n    '2014'\n    '2015'\n    '2016'\n    '2017'\n    '2018'\n    '2019'\n    '2020'\n    '2021'\n    '2022'\n    '2023'\n    '2024'\n  ]\n\nif (module?)\n  module.exports = ce\nif (exports?)\n  exports.ce = ce\nelse\n  this.ce = ce\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":16},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/jmuraski/Documents/workspace/commerceEverywhere/app/scripts/services/staticData.coffee","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"782af3f5945ba93bb692948bcb5f396fb7091c91","deserializer":"TextBuffer"},{"text":"'use strict'\n\nangular.module('commerceEverywhereApp')\n  .factory 'staticDataUtilService', () ->\n    {\n      getStates: () ->\n        ce.static.states\n      ,\n\n      getExpirationMonths: () ->\n        ce.static.months\n      ,\n\n      getExpirationYears: () ->\n        ce.static.years\n    }\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":20},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/jmuraski/Documents/workspace/commerceEverywhere/app/scripts/services/staticDataUtilService.coffee","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"2524b7fb73f83d45db5cfb5db94553cc5b88041b","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":4,"softTabs":true,"displayBuffer":{"id":5,"softWrapped":true,"editorWidthInChars":null,"scrollTop":465,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/jmuraski/Documents/workspace/commerceEverywhere/README.md","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":8,"softTabs":true,"displayBuffer":{"id":9,"softWrapped":false,"editorWidthInChars":null,"scrollTop":9771,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/jmuraski/Documents/workspace/commerceEverywhere/Gruntfile.js","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":12,"softTabs":true,"displayBuffer":{"id":13,"softWrapped":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/jmuraski/Documents/workspace/commerceEverywhere/app/scripts/services/restEndpointService.coffee","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":16,"softTabs":true,"displayBuffer":{"id":17,"softWrapped":false,"editorWidthInChars":null,"scrollTop":789,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/jmuraski/Documents/workspace/commerceEverywhere/app/scripts/services/staticData.coffee","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":20,"softTabs":true,"displayBuffer":{"id":21,"softWrapped":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/jmuraski/Documents/workspace/commerceEverywhere/app/scripts/services/staticDataUtilService.coffee","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemURI":"/Users/jmuraski/Documents/workspace/commerceEverywhere/README.md","focused":false,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-gfm","language-xml","language-javascript","language-coffee-script","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/jmuraski/Documents/workspace/commerceEverywhere/README.md":1422044182790,"/Users/jmuraski/Documents/workspace/commerceEverywhere/Gruntfile.js":1422042550409,"/Users/jmuraski/Documents/workspace/commerceEverywhere/app/scripts/services/restEndpointService.coffee":1422043976736,"/Users/jmuraski/Documents/workspace/commerceEverywhere/app/scripts/services/staticData.coffee":1422042656327,"/Users/jmuraski/Documents/workspace/commerceEverywhere/app/scripts/services/staticDataUtilService.coffee":1422042661138},"metrics":{"sessionLength":5396348},"tree-view":{"directoryExpansionStates":{"app":{"scripts":{"services":{}}}},"selectedPath":"/Users/jmuraski/Documents/workspace/commerceEverywhere/README.md","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":185,"width":417}}}