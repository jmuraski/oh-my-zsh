{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":195,"width":1440,"height":650,"maximized":false},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"paths":["/Users/jmuraski/Documents/workspace/coreos-vagrant"],"buffers":[{"text":"change line in user-data by going to https://discovery.etcd.io/new and adding that line to the discovery line\nThis needs to happen everytime you create the cluster from scratch, you need a new token\n```\ncurl -w \"\\n\" https://discovery.etcd.io/new\n```\nOnce you take the token and add it to the user-data file you can execute\n```\nvagrant up\n```\nThis will pull the images needed and will provision the servers\n\nAfter Vagrant is up, execute lines to add right ssh keys for vagrant\n```\nvagrant ssh-config --host coreos-vagrant >> ~/.ssh/config\nvagrant ssh-config --host coreos-vagrant | sed -n \"s/IdentityFile//gp\" | xargs ssh-add\n```\n\nThe first command adds an entry to your ~/.ssh/config so you can ssh in using ssh coreos-vagrant\nThe second command adds the default insecure_private_key to your ssh-agent on your Mac\n\n[Fleet Using Client](https://coreos.com/docs/launching-containers/launching/fleet-using-the-client/)\n\nThe following commands are needed to make it so you can use Fleetctl into the\nservers\n```\nexport FLEETCTL_TUNNEL=\"$(vagrant ssh-config core-01 | sed -n \"s/[ ]*HostName[ ]*//gp\"):$(vagrant ssh-config core-01 | sed -n \"s/[ ]*Port[ ]*//gp\")\"\necho $FLEETCTL_TUNNEL\nfleetctl list-machines\n```\n\n```\nsudo netstat -tulpn\n```\n\nadded line\n```\nconfig.vm.network \"forwarded_port\", guest: 4001, host: (4001 + i - 1), auto_correct: true\n```\nto vagrantfile to expose etcd port to host machine\n\nOn Ec2 in the User Data (Advanced Details) on Step 3\n```\n#cloud-config\n\ncoreos:\n  etcd:\n    # generate a new token from https://discovery.etcd.io/new\n    discovery: https://discovery.etcd.io/<token>\n    # multi-region and multi-cloud deployments need to use $public_ipv4\n    addr: $private_ipv4:4001\n    peer-addr: $private_ipv4:7001\n  units:\n    - name: etcd.service\n      command: start\n    - name: fleet.service\n      command: start\n  write_files:\n    - path: /home/core/.dockercfg\n      owner: core:core\n      permissions: 0644\n      content: |\n        {\n          \"https://index.docker.io/v1/\": {\n            \"auth\": \"xXxXxXxXxXx=\",\n            \"email\": \"username@example.com\"\n          },\n          \"https://index.example.com\": {\n            \"auth\": \"XxXxXxXxXxX=\",\n            \"email\": \"username@example.com\"\n          }\n        }\n    - path: /etc/fleet/fleet.conf\n      owner: core:core\n      permissions: 0644\n      content: |\n        public_ip=\"$private_ipv4\"\n        metadata=\"elastic_ip=true,public_ip=$public_ipv4\"\n```\n\nUse Fleet on EC2\n```\nssh-add <path to key to use>\nssh-add -l\nfleetctl --tunnel=<ip.address.of.server> list-machines\n```\n1. First line adds agent\n1. Second lists it\n1. Third calls fleet on server\n\n```\nssh-add -D\n```\nRemoves agent\n\nDocker container can connect to etcd (if on the same machine) by hitting ${COREOS_PRIVATE_IPV4} - as an env var passed in in service file\n\n[Core OS Cluster Architectures](https://coreos.com/docs/cluster-management/setup/cluster-architectures/) - shows different architectures to use with CoreOS and hod to set them up.\n","markers":{"markers":{"1":{"id":1,"range":[[14,0],[14,86]],"tailed":true,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":68,"goalBufferRange":null,"preserveFolds":true,"skipAtomicTokens":true},"deserializer":"Marker"},"1635":{"id":1635,"range":[[2,0],[4,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1636":{"id":1636,"range":[[12,0],[12,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1637":{"id":1637,"range":[[15,0],[15,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1638":{"id":1638,"range":[[20,0],[24,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1639":{"id":1639,"range":[[28,0],[28,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1640":{"id":1640,"range":[[30,0],[30,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1641":{"id":1641,"range":[[32,0],[32,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1642":{"id":1642,"range":[[35,0],[35,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1643":{"id":1643,"range":[[37,0],[37,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1644":{"id":1644,"range":[[39,0],[96,179]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1689":{"id":1689,"range":[[2,0],[4,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1690":{"id":1690,"range":[[12,0],[12,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1691":{"id":1691,"range":[[15,0],[15,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1692":{"id":1692,"range":[[20,0],[24,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1693":{"id":1693,"range":[[28,0],[28,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1694":{"id":1694,"range":[[30,0],[30,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1695":{"id":1695,"range":[[32,0],[32,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1696":{"id":1696,"range":[[35,0],[35,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1697":{"id":1697,"range":[[37,0],[37,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1698":{"id":1698,"range":[[39,0],[96,179]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1763":{"id":1763,"range":[[72,0],[73,23]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1790":{"id":1790,"range":[[72,0],[73,23]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1805":{"id":1805,"range":[[72,0],[73,23]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"3483":{"id":3483,"range":[[5,0],[9,63]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"3484":{"id":3484,"range":[[11,0],[11,68]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"3485":{"id":3485,"range":[[21,0],[23,7]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"3486":{"id":3486,"range":[[72,0],[73,23]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"3495":{"id":3495,"range":[[5,0],[9,63]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"3496":{"id":3496,"range":[[11,0],[11,68]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"3497":{"id":3497,"range":[[21,0],[23,7]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"3498":{"id":3498,"range":[[72,0],[73,23]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/jmuraski/Documents/workspace/coreos-vagrant/setup.md","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"67b197cc31b949af2a51b862f33aeb9bc2fd0476","deserializer":"TextBuffer"},{"text":"#cloud-config\n\ncoreos:\n  etcd:\n    # generate a new token for each unique cluster from https://discovery.etcd.io/new\n    # WARNING: replace each time you 'vagrant destroy'\n    discovery: https://discovery.etcd.io/2ad65d436bf572a335eed940bc604267\n    addr: $public_ipv4:4001\n    peer-addr: $public_ipv4:7001\n  fleet:\n    public-ip: $public_ipv4\n    metadata: \"role=worker,privateIp=$private_ipv4,publicIp=$public_ipv4\"\n  units:\n    - name: etcd.service\n      command: start\n    - name: fleet.service\n      command: start\n    - name: docker-tcp.socket\n      command: start\n      enable: true\n      content: |\n        [Unit]\n        Description=Docker Socket for the API\n\n        [Socket]\n        ListenStream=2375\n        Service=docker.service\n        BindIPv6Only=both\n\n        [Install]\n        WantedBy=sockets.target\n\n#write_files:\n#  - path: /etc/fleet/fleet.conf\n#    owner: core:core\n#    permissions: 0644\n#    content: |\n#      metadata=\"name=$instance_id,public_ip=$public_ipv4,use=backend,private_ip=$private_ipv4\"\n","markers":{"markers":{"1":{"id":1,"range":[[6,73],[6,73]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":176,"preserveFolds":true,"goalBufferRange":null,"skipAtomicTokens":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/jmuraski/Documents/workspace/coreos-vagrant/user-data","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"831d4ef1de3d92ea266f260a69e9a041255ed3c6","deserializer":"TextBuffer"},{"text":"\n# To automatically replace the discovery token on 'vagrant up', uncomment\n# the lines below:\n#\n#if File.exists?('user-data') && ARGV[0].eql?('up')\n#  require 'open-uri'\n#  require 'yaml'\n#\n#  token = open('https://discovery.etcd.io/new').read\n#\n#  data = YAML.load(IO.readlines('user-data')[1..-1].join)\n#  data['coreos']['etcd']['discovery'] = token\n#\n#  lines = YAML.dump(data).split(\"\\n\")\n#  lines[0] = '#cloud-config'\n#\n#  open('user-data', 'r+') do |f|\n#    f.puts(lines.join(\"\\n\"))\n#  end\n#end\n#\n#\n# coreos-vagrant is configured through a series of configuration\n# options (global ruby variables) which are detailed below. To modify\n# these options, first copy this file to \"config.rb\". Then simply\n# uncomment the necessary lines, leaving the $, and replace everything\n# after the equals sign..\n\n# Size of the CoreOS cluster created by Vagrant\n$num_instances=7\n\n# Official CoreOS channel from which updates should be downloaded\n$update_channel='alpha'\n\n# Log the serial consoles of CoreOS VMs to log/\n# Enable by setting value to true, disable with false\n# WARNING: Serial logging is known to result in extremely high CPU usage with\n# VirtualBox, so should only be used in debugging situations\n#$enable_serial_logging=false\n\n# Enable port forwarding of Docker TCP socket\n# Set to the TCP port you want exposed on the *host* machine, default is 2375\n# If 2375 is used, Vagrant will auto-increment (e.g. in the case of $num_instances > 1)\n# You can then use the docker tool locally by setting the following env var:\n#   export DOCKER_HOST='tcp://127.0.0.1:2375'\n$expose_docker_tcp=2375\n\n# Setting for VirtualBox VMs\n#$vb_gui = false\n#$vb_memory = 1024\n#$vb_cpus = 1\n\n$forwarded_ports = [4001]\n$vb_gui = false\n$vb_memory = 1024\n$vb_cpus = 1\n","markers":{"markers":{"1":{"id":1,"range":[[32,22],[32,22]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":180,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/jmuraski/Documents/workspace/coreos-vagrant/config.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"65ce944837701ad42671dddaecaf640f508a58a4","deserializer":"TextBuffer"},{"text":"# -*- mode: ruby -*-\n# # vi: set ft=ruby :\n\nrequire 'fileutils'\n\nVagrant.require_version \">= 1.6.0\"\n\nCLOUD_CONFIG_PATH = File.join(File.dirname(__FILE__), \"user-data\")\nCONFIG = File.join(File.dirname(__FILE__), \"config.rb\")\n\n# Defaults for config options defined in CONFIG\n$num_instances = 1\n$update_channel = \"alpha\"\n$enable_serial_logging = false\n$vb_gui = false\n$vb_memory = 1024\n$vb_cpus = 1\n\n# Attempt to apply the deprecated environment variable NUM_INSTANCES to\n# $num_instances while allowing config.rb to override it\nif ENV[\"NUM_INSTANCES\"].to_i > 0 && ENV[\"NUM_INSTANCES\"]\n  $num_instances = ENV[\"NUM_INSTANCES\"].to_i\nend\n\nif File.exist?(CONFIG)\n  require CONFIG\nend\n\nVagrant.configure(\"2\") do |config|\n  # always use Vagrants insecure key\n  config.ssh.insert_key = false\n\n  config.vm.box = \"coreos-%s\" % $update_channel\n  config.vm.box_version = \">= 308.0.1\"\n  config.vm.box_url = \"http://%s.release.core-os.net/amd64-usr/current/coreos_production_vagrant.json\" % $update_channel\n\n  config.vm.provider :vmware_fusion do |vb, override|\n    override.vm.box_url = \"http://%s.release.core-os.net/amd64-usr/current/coreos_production_vagrant_vmware_fusion.json\" % $update_channel\n  end\n\n  config.vm.provider :virtualbox do |v|\n    # On VirtualBox, we don't have guest additions or a functional vboxsf\n    # in CoreOS, so tell Vagrant that so it can be smarter.\n    v.check_guest_additions = false\n    v.functional_vboxsf     = false\n  end\n\n  # plugin conflict\n  if Vagrant.has_plugin?(\"vagrant-vbguest\") then\n    config.vbguest.auto_update = false\n  end\n\n  (1..$num_instances).each do |i|\n    config.vm.define vm_name = \"core-%02d\" % i do |config|\n      config.vm.hostname = vm_name\n\n      if $enable_serial_logging\n        logdir = File.join(File.dirname(__FILE__), \"log\")\n        FileUtils.mkdir_p(logdir)\n\n        serialFile = File.join(logdir, \"%s-serial.txt\" % vm_name)\n        FileUtils.touch(serialFile)\n\n        config.vm.provider :vmware_fusion do |v, override|\n          v.vmx[\"serial0.present\"] = \"TRUE\"\n          v.vmx[\"serial0.fileType\"] = \"file\"\n          v.vmx[\"serial0.fileName\"] = serialFile\n          v.vmx[\"serial0.tryNoRxLoss\"] = \"FALSE\"\n        end\n\n        config.vm.provider :virtualbox do |vb, override|\n          vb.customize [\"modifyvm\", :id, \"--uart1\", \"0x3F8\", \"4\"]\n          vb.customize [\"modifyvm\", :id, \"--uartmode1\", serialFile]\n        end\n      end\n\n      if $expose_docker_tcp\n        config.vm.network \"forwarded_port\", guest: 2375, host: ($expose_docker_tcp + i - 1), auto_correct: true\n      end\n\n    # config.vm.network \"forwarded_port\", guest: 4001, host: (4001 + i - 1), auto_correct: true\n\n      $forwarded_ports.each do |port|\n          config.vm.network \"forwarded_port\", guest: port, host: (port + i -1), auto_correct:true\n      end\n      # How to add a file to the vms from the local machine, could be used for adding .dockercfg for accessing private repo\n      #config.vm.provision \"file\", source: \"~/Documents/workspace/zeo_server/docker/postgresql/Dockerfile\", destination: \"Dockerfile\"\n      config.vm.provision \"file\", source: \"~/.dockercfg\", destination: \".dockercfg\"\n\n\n      config.vm.provider :vmware_fusion do |vb|\n        vb.gui = $vb_gui\n      end\n\n      config.vm.provider :virtualbox do |vb|\n        vb.gui = $vb_gui\n        vb.memory = $vb_memory\n        vb.cpus = $vb_cpus\n      end\n\n      ip = \"172.17.8.#{i+100}\"\n      config.vm.network :private_network, ip: ip\n\n      # Uncomment below to enable NFS for sharing the host machine into the coreos-vagrant VM.\n      #config.vm.synced_folder \".\", \"/home/core/share\", id: \"core\", :nfs => true, :mount_options => ['nolock,vers=3,udp']\n\n      if File.exist?(CLOUD_CONFIG_PATH)\n        config.vm.provision :file, :source => \"#{CLOUD_CONFIG_PATH}\", :destination => \"/tmp/vagrantfile-user-data\"\n        config.vm.provision :shell, :inline => \"mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/\", :privileged => true\n      end\n\n    end\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[18,14],[18,14]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":190,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/jmuraski/Documents/workspace/coreos-vagrant/Vagrantfile","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"3dd73fa53d641cc221eb08c6084bc734193adf03","deserializer":"TextBuffer"},{"text":"# AWS Nginx Server\nHost ec2-nginx-dev-001\n  HostName 54.68.185.97\n  User ubuntu\n  IdentityFile ~/.ssh/keys/devjam-keypair.pem\n#\n# AWS Core OS Servers 1 - 5\n# ec2-coreos-port forwards fleet and etcd ports\n#\nHost ec2-core-01\n  HostName 54.69.190.50\n  User core\n  IdentityFile ~/.ssh/keys/devjam-keypair.pem\n  ForwardAgent yes\n\nHost ec2-coreos-port\n  HostName 54.69.190.50\n  User core\n  IdentityFile ~/.ssh/keys/devjam-keypair.pem\n  LocalForward 4001 127.0.0.1:4001\n  LocalForward 7001 127.0.0.1:7001\n  ForwardAgent yes\n\n#\n# Config for Remote Insights beta server\n# port forwards ports for Postgres (5432) and Redis (6379)\n#\nHost ri_server\n  HostName beta.remoteinsights.net\n  IdentityFile ~/.ssh/id_rsa\n  User jmuraski\n  ForwardAgent yes\n\nHost ri_port\n  HostName beta.remoteinsights.net\n  IdentityFile ~/.ssh/id_rsa\n  LocalForward 45432 127.0.0.1:5432\n  LocalForward 49379 127.0.0.1:6379\n  ForwardAgent yes\n  User jmuraski\n\n# have an ssh tunnel local 3306 to server 9906 connect with ssh -f -N tunnel\n# Host tunnel\n#    HostName database.example.com\n#    IdentityFile ~/.ssh/coolio.example.key\n#    LocalForward 9906 127.0.0.1:3306\n#    User coolio\n\n#\n# Vagrant SSH setting for local Core OS, remove if you destroy instances\n#\nHost coreos-vagrant\n  HostName 127.0.0.1\n  User core\n  Port 2222\n  UserKnownHostsFile /dev/null\n  StrictHostKeyChecking no\n  PasswordAuthentication no\n  IdentityFile /Users/jmuraski/.vagrant.d/insecure_private_key\n  IdentitiesOnly yes\n  LogLevel FATAL\n\nHost coreos-vagrant\n  HostName 127.0.0.1\n  User core\n  Port 2200\n  UserKnownHostsFile /dev/null\n  StrictHostKeyChecking no\n  PasswordAuthentication no\n  IdentityFile /Users/jmuraski/.vagrant.d/insecure_private_key\n  IdentitiesOnly yes\n  LogLevel FATAL\n\nHost coreos-vagrant\n  HostName 127.0.0.1\n  User core\n  Port 2201\n  UserKnownHostsFile /dev/null\n  StrictHostKeyChecking no\n  PasswordAuthentication no\n  IdentityFile /Users/jmuraski/.vagrant.d/insecure_private_key\n  IdentitiesOnly yes\n  LogLevel FATAL\n\nHost coreos-vagrant\n  HostName 127.0.0.1\n  User core\n  Port 2202\n  UserKnownHostsFile /dev/null\n  StrictHostKeyChecking no\n  PasswordAuthentication no\n  IdentityFile /Users/jmuraski/.vagrant.d/insecure_private_key\n  IdentitiesOnly yes\n  LogLevel FATAL\n\nHost coreos-vagrant\n  HostName 127.0.0.1\n  User core\n  Port 2203\n  UserKnownHostsFile /dev/null\n  StrictHostKeyChecking no\n  PasswordAuthentication no\n  IdentityFile /Users/jmuraski/.vagrant.d/insecure_private_key\n  IdentitiesOnly yes\n  LogLevel FATAL\n\nHost coreos-vagrant\n  HostName 127.0.0.1\n  User core\n  Port 2204\n  UserKnownHostsFile /dev/null\n  StrictHostKeyChecking no\n  PasswordAuthentication no\n  IdentityFile /Users/jmuraski/.vagrant.d/insecure_private_key\n  IdentitiesOnly yes\n  LogLevel FATAL\n\nHost coreos-vagrant\n  HostName 127.0.0.1\n  User core\n  Port 2205\n  UserKnownHostsFile /dev/null\n  StrictHostKeyChecking no\n  PasswordAuthentication no\n  IdentityFile /Users/jmuraski/.vagrant.d/insecure_private_key\n  IdentitiesOnly yes\n  LogLevel FATAL\n\n","markers":{"markers":{"1":{"id":1,"range":[[51,0],[51,0]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":214,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[51,0],[51,0]],"newRange":[[51,0],[62,0]],"oldText":"","newText":"Host coreos-vagrant\n  HostName 127.0.0.1\n  User core\n  Port 2222\n  UserKnownHostsFile /dev/null\n  StrictHostKeyChecking no\n  PasswordAuthentication no\n  IdentityFile /Users/jmuraski/.vagrant.d/insecure_private_key\n  IdentitiesOnly yes\n  LogLevel FATAL\n\n","normalizeLineEndings":false,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[62,0],[62,0]],"newRange":[[62,0],[73,0]],"oldText":"","newText":"Host coreos-vagrant\n  HostName 127.0.0.1\n  User core\n  Port 2200\n  UserKnownHostsFile /dev/null\n  StrictHostKeyChecking no\n  PasswordAuthentication no\n  IdentityFile /Users/jmuraski/.vagrant.d/insecure_private_key\n  IdentitiesOnly yes\n  LogLevel FATAL\n\n","normalizeLineEndings":false,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[73,0],[73,0]],"newRange":[[73,0],[84,0]],"oldText":"","newText":"Host coreos-vagrant\n  HostName 127.0.0.1\n  User core\n  Port 2201\n  UserKnownHostsFile /dev/null\n  StrictHostKeyChecking no\n  PasswordAuthentication no\n  IdentityFile /Users/jmuraski/.vagrant.d/insecure_private_key\n  IdentitiesOnly yes\n  LogLevel FATAL\n\n","normalizeLineEndings":false,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[84,0],[84,0]],"newRange":[[84,0],[95,0]],"oldText":"","newText":"Host coreos-vagrant\n  HostName 127.0.0.1\n  User core\n  Port 2202\n  UserKnownHostsFile /dev/null\n  StrictHostKeyChecking no\n  PasswordAuthentication no\n  IdentityFile /Users/jmuraski/.vagrant.d/insecure_private_key\n  IdentitiesOnly yes\n  LogLevel FATAL\n\n","normalizeLineEndings":false,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[95,0],[95,0]],"newRange":[[95,0],[106,0]],"oldText":"","newText":"Host coreos-vagrant\n  HostName 127.0.0.1\n  User core\n  Port 2203\n  UserKnownHostsFile /dev/null\n  StrictHostKeyChecking no\n  PasswordAuthentication no\n  IdentityFile /Users/jmuraski/.vagrant.d/insecure_private_key\n  IdentitiesOnly yes\n  LogLevel FATAL\n\n","normalizeLineEndings":false,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[106,0],[106,0]],"newRange":[[106,0],[117,0]],"oldText":"","newText":"Host coreos-vagrant\n  HostName 127.0.0.1\n  User core\n  Port 2204\n  UserKnownHostsFile /dev/null\n  StrictHostKeyChecking no\n  PasswordAuthentication no\n  IdentityFile /Users/jmuraski/.vagrant.d/insecure_private_key\n  IdentitiesOnly yes\n  LogLevel FATAL\n\n","normalizeLineEndings":false,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[117,0],[117,0]],"newRange":[[117,0],[128,0]],"oldText":"","newText":"Host coreos-vagrant\n  HostName 127.0.0.1\n  User core\n  Port 2205\n  UserKnownHostsFile /dev/null\n  StrictHostKeyChecking no\n  PasswordAuthentication no\n  IdentityFile /Users/jmuraski/.vagrant.d/insecure_private_key\n  IdentitiesOnly yes\n  LogLevel FATAL\n\n","normalizeLineEndings":false,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/jmuraski/.ssh/config","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"ae96893cb5339930bfaac0e841e87495c0e74841","deserializer":"TextBuffer"},{"text":"# CoreOS Vagrant\n\nThis repo provides a template Vagrantfile to create a CoreOS virtual machine using the VirtualBox software hypervisor.\nAfter setup is complete you will have a single CoreOS virtual machine running on your local machine.\n\n## Streamlined setup\n\n1) Install dependencies\n\n* [VirtualBox][virtualbox] 4.3.10 or greater.\n* [Vagrant][vagrant] 1.6 or greater.\n\n2) Clone this project and get it running!\n\n```\ngit clone https://github.com/coreos/coreos-vagrant/\ncd coreos-vagrant\n```\n\n3) Startup and SSH\n\nThere are two \"providers\" for Vagrant with slightly different instructions.\nFollow one of the following two options:\n\n**VirtualBox Provider**\n\nThe VirtualBox provider is the default Vagrant provider. Use this if you are unsure.\n\n```\nvagrant up\nvagrant ssh\n```\n\n**VMware Provider**\n\nThe VMware provider is a commercial addon from Hashicorp that offers better stability and speed.\nIf you use this provider follow these instructions.\n\n```\nvagrant up --provider vmware_fusion\nvagrant ssh\n```\n\n``vagrant up`` triggers vagrant to download the CoreOS image (if necessary) and (re)launch the instance\n\n``vagrant ssh`` connects you to the virtual machine.\nConfiguration is stored in the directory so you can always return to this machine by executing vagrant ssh from the directory where the Vagrantfile was located.\n\n3) Get started [using CoreOS][using-coreos]\n\n[virtualbox]: https://www.virtualbox.org/\n[vagrant]: https://www.vagrantup.com/downloads.html\n[using-coreos]: http://coreos.com/docs/using-coreos/\n\n#### Shared Folder Setup\n\nThere is optional shared folder setup.\nYou can try it out by adding a section to your Vagrantfile like this.\n\n```\nconfig.vm.network \"private_network\", ip: \"172.17.8.150\"\nconfig.vm.synced_folder \".\", \"/home/core/share\", id: \"core\", :nfs => true,  :mount_options   => ['nolock,vers=3,udp']\n```\n\nAfter a 'vagrant reload' you will be prompted for your local machine password.\n\n#### Provisioning with user-data\n\nThe Vagrantfile will provision your CoreOS VM(s) with [coreos-cloudinit][coreos-cloudinit] if a `user-data` file is found in the project directory.\ncoreos-cloudinit simplifies the provisioning process through the use of a script or cloud-config document.\n\nTo get started, copy `user-data.sample` to `user-data` and make any necessary modifications.\nCheck out the [coreos-cloudinit documentation][coreos-cloudinit] to learn about the available features.\n\n[coreos-cloudinit]: https://github.com/coreos/coreos-cloudinit\n\n#### Configuration\n\nThe Vagrantfile will parse a `config.rb` file containing a set of options used to configure your CoreOS cluster.\nSee `config.rb.sample` for more information.\n\n## Cluster Setup\n\nLaunching a CoreOS cluster on Vagrant is as simple as configuring `$num_instances` in a `config.rb` file to 3 (or more!) and running `vagrant up`.\nMake sure you provide a fresh discovery URL in your `user-data` if you wish to bootstrap etcd in your cluster.\n\n## New Box Versions\n\nCoreOS is a rolling release distribution and versions that are out of date will automatically update.\nIf you want to start from the most up to date version you will need to make sure that you have the latest box file of CoreOS.\nSimply remove the old box file and vagrant will download the latest one the next time you `vagrant up`.\n\n```\nvagrant box remove coreos --provider vmware_fusion\nvagrant box remove coreos --provider virtualbox\n```\n\n## Docker Forwarding\n\nBy setting the `$expose_docker_tcp` configuration value you can forward a local TCP port to docker on\neach CoreOS machine that you launch. The first machine will be available on the port that you specify\nand each additional machine will increment the port by 1.\n\nFollow the [Enable Remote API instructions][coreos-enabling-port-forwarding] to get the CoreOS VM setup to work with port forwarding.\n\n[coreos-enabling-port-forwarding]: https://coreos.com/docs/launching-containers/building/customizing-docker/#enable-the-remote-api-on-a-new-socket\n\nThen you can then use the `docker` command from your local shell by setting `DOCKER_HOST`:\n\n    export DOCKER_HOST=tcp://localhost:2375\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":260,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/jmuraski/Documents/workspace/coreos-vagrant/README.md","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"9aee54e920a5dea9f954b0bad7a97af31d31d92b","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":65,"items":[{"id":68,"softTabs":true,"displayBuffer":{"id":69,"softWrapped":false,"editorWidthInChars":null,"scrollTop":67,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/jmuraski/Documents/workspace/coreos-vagrant/setup.md","tabLength":2,"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":176,"softTabs":true,"displayBuffer":{"id":177,"softWrapped":false,"editorWidthInChars":null,"scrollTop":1,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/jmuraski/Documents/workspace/coreos-vagrant/user-data","tabLength":2,"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":260,"softTabs":true,"displayBuffer":{"id":261,"softWrapped":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/jmuraski/Documents/workspace/coreos-vagrant/README.md","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":180,"softTabs":true,"displayBuffer":{"id":181,"softWrapped":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/jmuraski/Documents/workspace/coreos-vagrant/config.rb","tabLength":2,"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":190,"softTabs":true,"displayBuffer":{"id":191,"softWrapped":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/jmuraski/Documents/workspace/coreos-vagrant/Vagrantfile","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":214,"softTabs":true,"displayBuffer":{"id":215,"softWrapped":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/jmuraski/.ssh/config","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemURI":"/Users/jmuraski/Documents/workspace/coreos-vagrant/setup.md","focused":true,"deserializer":"Pane"},"activePaneId":65,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-gfm","language-yaml","language-ruby","language-xml","language-hyperlink","language-todo"],"deserializer":"Workspace"},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"packageStates":{"fuzzy-finder":{"/Users/jmuraski/Documents/workspace/coreos-vagrant/setup.md":1422160863683,"/Users/jmuraski/Documents/workspace/coreos-vagrant/user-data":1422160853089,"/Users/jmuraski/Documents/workspace/coreos-vagrant/README.md":1421881067761,"/Users/jmuraski/Documents/workspace/coreos-vagrant/config.rb":1422160618646,"/Users/jmuraski/Documents/workspace/coreos-vagrant/Vagrantfile":1415893106017,"/Users/jmuraski/.ssh/config":1421881045838},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":133452},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/Users/jmuraski/Documents/workspace/coreos-vagrant/setup.md","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200},"find-and-replace":{"viewState":"","modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false},"projectViewState":"","resultsModelState":{"useRegex":false,"caseSensitive":false},"findHistory":["config.vm","config.vm.net","config.vm.synch","port",".docker","fleet","docker_ho","public_ipv4","core-","hostname","update"],"replaceHistory":[],"pathsHistory":[]}}}