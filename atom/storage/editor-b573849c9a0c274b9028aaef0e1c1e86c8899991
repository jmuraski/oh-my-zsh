{"mode":"editor","version":1,"windowDimensions":{"x":1065,"y":711,"width":1250,"height":650,"maximized":false},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"paths":["/Users/jmuraski/Documents/workspace/remoteinsights/webapp/test/unit/com/remoteinsights/services"],"buffers":[{"text":"package com.remoteinsights.services\n\nimport com.remoteinsights.GatewayUpdate\nimport com.remoteinsights.domain.Beacon\nimport com.remoteinsights.domain.Gateway\nimport com.remoteinsights.domain.GatewayBeacon\nimport com.remoteinsights.domain.Organization\nimport com.remoteinsights.util.GatewayBeaconBuilder\nimport com.remoteinsights.util.GatewayBeaconUpdateBuilder\nimport com.remoteinsights.util.GatewayLocationBuilder\nimport grails.buildtestdata.mixin.Build\nimport grails.test.mixin.Mock\nimport grails.test.mixin.TestFor\nimport spock.lang.Ignore\nimport spock.lang.Specification\n\n@TestFor(GatewayUpdateHandlerService)\n@Mock([Organization, Gateway, Beacon, GatewayBeacon])\n@Build([Organization, Gateway, Beacon, GatewayBeacon])\nclass GatewayUpdateHandlerServiceSpec extends Specification {\n\n    static String GATEWAY_ID = '101013'\n\n    GatewayBeaconUpdateBuilder gatewayBeaconUpdateBuilder\n    GatewayBeaconBuilder gatewayBeaconBuilder\n    GatewayLocationBuilder gatewayLocationBuilder\n\n    def beaconEventServiceMock\n\n    def setup() {\n        gatewayBeaconUpdateBuilder = new GatewayBeaconUpdateBuilder()\n        gatewayBeaconBuilder = new GatewayBeaconBuilder()\n        gatewayLocationBuilder = new GatewayLocationBuilder()\n\n        gatewayBeaconUpdateBuilder.withGid(GATEWAY_ID)\n            .withType(GatewayBeaconUpdateBuilder.UpdateType.BEACON)\n            .withLength(102, 0)\n\n        beaconEventServiceMock = Mock(BeaconEventService)\n        service.beaconEventService = beaconEventServiceMock\n    }\n\n    @Ignore\n    def 'update creates new gateway and fails to find beacon, no beacon event created'() {\n        // This test fails, can not find or create gateway because organization is\n        // required but not available on update message\n        given:\n        addBeacon('1111169', -50, 2, true, false)\n\n        when:\n        GatewayUpdate gatewayUpdate = gatewayBeaconUpdateBuilder.build()\n        service.processUpdate(gatewayUpdate.getUpdateType())\n\n        then:\n        Gateway.count() == 1\n    }\n\n    def 'update finds existing gateway and fails to find beacon, no beacon event created'() {\n        given:\n        Gateway.build(gid: GATEWAY_ID, organization: Organization.build())\n        addBeacon('1111169', -50, 2, true, false)\n\n        when:\n        GatewayUpdate gatewayUpdate = gatewayBeaconUpdateBuilder.build()\n        service.processUpdate(gatewayUpdate.getUpdateType())\n\n        then:\n        GatewayBeacon.count() == 0\n        0 * _._\n    }\n\n    def 'update finds existing gateway and beacon, beacon event created'() {\n        given:\n        Gateway.build(gid: GATEWAY_ID, organization: Organization.build())\n        addBeacon('1111169', -50, 2, true)\n\n        when:\n        GatewayUpdate gatewayUpdate = gatewayBeaconUpdateBuilder.build()\n        service.processUpdate(gatewayUpdate.getUpdateType())\n\n        then:\n        GatewayBeacon.count() == 1\n        GatewayBeacon.first().rssi == -50\n        1 * beaconEventServiceMock.create('1111169', GATEWAY_ID, -50, 2, true, 0)\n        0 * _._\n    }\n\n    def 'update finds existing gateway and two beacons, two beacon events created'() {\n        given:\n        Gateway.build(gid: GATEWAY_ID, organization: Organization.build())\n        addBeacon('1111169', -50, 2, true)\n        addBeacon('1111170', -40, 3, false)\n\n        when:\n        GatewayUpdate gatewayUpdate = gatewayBeaconUpdateBuilder.build()\n        service.processUpdate(gatewayUpdate.getUpdateType())\n\n        then:\n        GatewayBeacon.count() == 2\n        List<GatewayBeacon> gatewayBeacons = GatewayBeacon.list()\n        gatewayBeacons.rssi.containsAll([-50, -40])\n        1 * beaconEventServiceMock.create('1111169', GATEWAY_ID, -50, 2, true, 0)\n        1 * beaconEventServiceMock.create('1111170', GATEWAY_ID, -40, 3, false, 0)\n        0 * _._\n    }\n\n    def 'update finds existing gateway and updates the lat / lng'() {\n        given:\n        Gateway.build(\n            gid: GATEWAY_ID,\n            organization: Organization.build(),\n            latitude: 11.11,\n            longitude: 22.22\n        )\n\n        gatewayBeaconUpdateBuilder.withType(GatewayBeaconUpdateBuilder.UpdateType.LOCATION)\n\n        gatewayLocationBuilder.withGpsType(GatewayLocationBuilder.GpsType.GPGGA)\n            .withLatDegree('12')\n            .withLatMinute('23')\n            .withLatSecond('34')\n            .withLatDirection(GatewayLocationBuilder.Direction.N)\n            .withLngDegree('45')\n            .withLngMinute('56')\n            .withLngSecond('67')\n            .withLngDirection(GatewayLocationBuilder.Direction.E)\n\n        gatewayBeaconUpdateBuilder.withLocation(gatewayLocationBuilder.build())\n\n        when:\n        GatewayUpdate gatewayUpdate = gatewayBeaconUpdateBuilder.build()\n        service.processUpdate(gatewayUpdate.getUpdateType())\n\n        then:\n        Gateway gateway = Gateway.first()\n        gateway.latitude == 12.3927777777\n        gateway.longitude == -44.0480555556\n        0 * _._\n    }\n\n    private addBeacon(String bid, int rssi, int battery, boolean motion, boolean createDomain = true) {\n        if (createDomain) {\n            Beacon.build(bid: bid, battery: battery, motion: motion)\n        }\n\n        gatewayBeaconBuilder.withBid(bid)\n            .withRssi(rssi)\n            .withBattery(battery)\n            .withMotion(motion)\n        gatewayBeaconUpdateBuilder.withBeacon(gatewayBeaconBuilder.build())\n    }\n}\n","markers":{"markers":{"1":{"id":1,"range":[[102,79],[102,79]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":4,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[83,77],[83,77]],"newRange":[[83,77],[83,78]],"oldText":"","newText":",","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[83,78],[83,78]],"newRange":[[83,78],[83,79]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[83,79],[83,79]],"newRange":[[83,79],[83,80]],"oldText":"","newText":"0","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[101,77],[101,77]],"newRange":[[101,77],[101,78]],"oldText":"","newText":",","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[101,78],[101,78]],"newRange":[[101,78],[101,79]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[101,79],[101,79]],"newRange":[[101,79],[101,80]],"oldText":"","newText":"0","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[102,78],[102,78]],"newRange":[[102,78],[102,79]],"oldText":"","newText":".","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[102,79],[102,79]],"newRange":[[102,79],[102,80]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[102,80],[102,80]],"newRange":[[102,80],[102,81]],"oldText":"","newText":"0","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"reversed":false,"range":[[102,79],[102,79]]},"newParams":{"reversed":true,"range":[[102,78],[102,79]]},"deserializer":"MarkerPatch"},{"oldRange":[[102,78],[102,79]],"newRange":[[102,78],[102,78]],"oldText":".","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[102,78],[102,78]],"newRange":[[102,78],[102,79]],"oldText":"","newText":",","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/jmuraski/Documents/workspace/remoteinsights/webapp/test/unit/com/remoteinsights/services/GatewayUpdateHandlerServiceSpec.groovy","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"9e2eab7d8f418fcfc40fd95405df93cff7fb2437","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":4,"softTabs":true,"displayBuffer":{"id":5,"softWrapped":false,"editorWidthInChars":null,"scrollTop":1597,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/jmuraski/Documents/workspace/remoteinsights/webapp/test/unit/com/remoteinsights/services/GatewayUpdateHandlerServiceSpec.groovy","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemURI":"/Users/jmuraski/Documents/workspace/remoteinsights/webapp/test/unit/com/remoteinsights/services/GatewayUpdateHandlerServiceSpec.groovy","focused":true,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-groovy","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"find-and-replace":{"viewState":"","modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false,"wholeWord":false},"projectViewState":"","resultsModelState":{"useRegex":false,"caseSensitive":false},"findHistory":["create",".create"],"replaceHistory":[],"pathsHistory":[]},"fuzzy-finder":{"/Users/jmuraski/Documents/workspace/remoteinsights/webapp/test/unit/com/remoteinsights/services/GatewayUpdateHandlerServiceSpec.groovy":1424143257953},"metrics":{"sessionLength":1655839},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/Users/jmuraski/Documents/workspace/remoteinsights/webapp/test/unit/com/remoteinsights/services/GatewayUpdateHandlerServiceSpec.groovy","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}