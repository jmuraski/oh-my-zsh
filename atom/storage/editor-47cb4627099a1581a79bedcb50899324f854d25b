{"mode":"editor","version":1,"windowDimensions":{"x":283,"y":22,"width":1157,"height":767,"maximized":false},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/jmuraski","buffers":[{"text":"# Path to your oh-my-zsh configuration.\nZSH=$HOME/.oh-my-zsh\n\n# Set name of the theme to load.\n# Look in ~/.oh-my-zsh/themes/\n# Optionally, if you set this to \"random\", it'll load a random theme each\n# time that oh-my-zsh is loaded.\nZSH_THEME=\"jmuraski\"\n\n# Example aliases\n# alias zshconfig=\"subl ~/.zshrc\"\n# alias ohmyzsh=\"subl ~/.oh-my-zsh\"\n\n# Set to this to use case-sensitive completion\n# CASE_SENSITIVE=\"true\"\n\n# Comment this out to disable weekly auto-update checks\n# DISABLE_AUTO_UPDATE=\"true\"\n\n# Uncomment following line if you want to disable colors in ls\n# DISABLE_LS_COLORS=\"true\"\n\n# Uncomment following line if you want to disable autosetting terminal title.\n# DISABLE_AUTO_TITLE=\"true\"\n\n# Uncomment following line if you want red dots to be displayed while waiting for completion\n# COMPLETION_WAITING_DOTS=\"true\"\n\n# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)\n# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/\n# Example format: plugins=(rails git textmate ruby lighthouse)\nplugins=(git git-flow coffee bower brew node npm rvm svn history mvn, docker, grails, tmux, tmuxinator)\n \nsource $ZSH/oh-my-zsh.sh\n\n# RVM line\n#[[ -s \"$HOME/.rvm/scripts/rvm\" ]] && . \"$HOME/.rvm/scripts/rvm\"\n\n# Customize to your needs...\nexport PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/usr/local/sbin:/sbin:/usr/X11/bin:$MY_SCRIPTS\nexport PATH=$PATH:/usr/local/share/npm/bin\nexport PATH=$PATH:/Applications/kdiff3.app/Contents/MacOS\t\nexport PATH=$PATH:/usr/local/opt/ruby/bin\nexport PATH=$PATH:$GRADLE_HOME/bin\nexport PATH=$PATH:$ANDROID_HOME/tools\nexport PATH=$PATH:$ANDROID_TOOLS\n\n### Added by the Heroku Toolbelt\nexport PATH=\"/usr/local/heroku/bin:$PATH\"\n\n#THIS MUST BE AT THE END OF THE FILE FOR GVM TO WORK!!!\n[[ -s \"/Users/jmuraski/.gvm/bin/gvm-init.sh\" ]] && source \"/Users/jmuraski/.gvm/bin/gvm-init.sh\"\n","markers":{"markers":{"1":{"id":1,"range":[[47,32],[47,32]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":286,"goalBufferRange":null},"deserializer":"Marker"},"2":{"id":2,"range":[[0,0],[0,0]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":10,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/jmuraski/.oh-my-zsh/templates/zshrc.jmuraski-template","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"45d2fe4a99d6a54b74b1ccb735ee29c4113f035e","deserializer":"TextBuffer"},{"text":"local _atom_paths > /dev/null 2>&1\n_atom_paths=(\n    \"$HOME/Applications/Atom.app\"\n    \"/Applications/Atom.app\"\n)\n\nfor _atom_path in $_atom_paths; do\n    if [[ -a $_atom_path ]]; then\n        alias at=\"open -a '$_atom_path'\"\n        break\n    fi\ndone\n\nalias att='at .'\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":16,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/jmuraski/.oh-my-zsh/plugins/atom/atom.plugin.zsh","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"2ac9329f2aa6ed7d0a6b05479930b0aa7c1930aa","deserializer":"TextBuffer"},{"text":"#!zsh\n#\n# Installation\n# ------------\n#\n# To achieve git-flow completion nirvana:\n#\n#  0. Update your zsh's git-completion module to the newest verion.\n#     From here. http://zsh.git.sourceforge.net/git/gitweb.cgi?p=zsh/zsh;a=blob_plain;f=Completion/Unix/Command/_git;hb=HEAD\n#\n#  1. Install this file. Either:\n#\n#     a. Place it in your .zshrc:\n#\n#     b. Or, copy it somewhere (e.g. ~/.git-flow-completion.zsh) and put the following line in\n#        your .zshrc:\n#\n#            source ~/.git-flow-completion.zsh\n#\n#     c. Or, use this file as a oh-my-zsh plugin.\n#\n\n#Alias\nalias gf='git flow'\nalias gcd='git checkout develop'\nalias gch='git checkout hotfix'\nalias gcr='git checkout release'\n\n_git-flow ()\n{\n\tlocal curcontext=\"$curcontext\" state line\n\ttypeset -A opt_args\n\n\t_arguments -C \\\n\t\t':command:->command' \\\n\t\t'*::options:->options'\n\n\tcase $state in\n\t\t(command)\n\n\t\t\tlocal -a subcommands\n\t\t\tsubcommands=(\n\t\t\t\t'init:Initialize a new git repo with support for the branching model.'\n\t\t\t\t'feature:Manage your feature branches.'\n\t\t\t\t'release:Manage your release branches.'\n\t\t\t\t'hotfix:Manage your hotfix branches.'\n\t\t\t\t'support:Manage your support branches.'\n\t\t\t\t'version:Shows version information.'\n\t\t\t)\n\t\t\t_describe -t commands 'git flow' subcommands\n\t\t;;\n\n\t\t(options)\n\t\t\tcase $line[1] in\n\n\t\t\t\t(init)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t-f'[Force setting of gitflow branches, even if already configured]'\n\t\t\t\t\t;;\n\n\t\t\t\t\t(version)\n\t\t\t\t\t;;\n\n\t\t\t\t\t(hotfix)\n\t\t\t\t\t\t__git-flow-hotfix\n\t\t\t\t\t;;\n\n\t\t\t\t\t(release)\n\t\t\t\t\t\t__git-flow-release\n\t\t\t\t\t;;\n\n\t\t\t\t\t(feature)\n\t\t\t\t\t\t__git-flow-feature\n\t\t\t\t\t;;\n\t\t\tesac\n\t\t;;\n\tesac\n}\n\n__git-flow-release ()\n{\n\tlocal curcontext=\"$curcontext\" state line\n\ttypeset -A opt_args\n\n\t_arguments -C \\\n\t\t':command:->command' \\\n\t\t'*::options:->options'\n\n\tcase $state in\n\t\t(command)\n\n\t\t\tlocal -a subcommands\n\t\t\tsubcommands=(\n\t\t\t\t'start:Start a new release branch.'\n\t\t\t\t'finish:Finish a release branch.'\n\t\t\t\t'list:List all your release branches. (Alias to `git flow release`)'\n\t\t\t\t'publish: public'\n\t\t\t\t'track: track'\n\t\t\t)\n\t\t\t_describe -t commands 'git flow release' subcommands\n\t\t\t_arguments \\\n\t\t\t\t-v'[Verbose (more) output]'\n\t\t;;\n\n\t\t(options)\n\t\t\tcase $line[1] in\n\n\t\t\t\t(start)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t-F'[Fetch from origin before performing finish]'\\\n\t\t\t\t\t\t':version:__git_flow_version_list'\n\t\t\t\t;;\n\n\t\t\t\t(finish)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t-F'[Fetch from origin before performing finish]' \\\n\t\t\t\t\t\t-s'[Sign the release tag cryptographically]'\\\n\t\t\t\t\t\t-u'[Use the given GPG-key for the digital signature (implies -s)]'\\\n\t\t\t\t\t\t-m'[Use the given tag message]'\\\n\t\t\t\t\t\t-p'[Push to $ORIGIN after performing finish]'\\\n\t\t\t\t\t\t-k'[Keep branch after performing finish]'\\\n\t\t\t\t\t\t-n\"[Don't tag this release]\"\\\n\t\t\t\t\t\t':version:__git_flow_version_list'\n\t\t\t\t;;\n\n\t\t\t\t(publish)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t':version:__git_flow_version_list'\\\n\t\t\t\t;;\n\n\t\t\t\t(track)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t':version:__git_flow_version_list'\\\n\t\t\t\t;;\n\n\t\t\t\t*)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t-v'[Verbose (more) output]'\n\t\t\t\t;;\n\t\t\tesac\n\t\t;;\n\tesac\n}\n\n__git-flow-hotfix ()\n{\n\tlocal curcontext=\"$curcontext\" state line\n\ttypeset -A opt_args\n\n\t_arguments -C \\\n\t\t':command:->command' \\\n\t\t'*::options:->options'\n\n\tcase $state in\n\t\t(command)\n\n\t\t\tlocal -a subcommands\n\t\t\tsubcommands=(\n\t\t\t\t'start:Start a new hotfix branch.'\n\t\t\t\t'finish:Finish a hotfix branch.'\n\t\t\t\t'list:List all your hotfix branches. (Alias to `git flow hotfix`)'\n\t\t\t)\n\t\t\t_describe -t commands 'git flow hotfix' subcommands\n\t\t\t_arguments \\\n\t\t\t\t-v'[Verbose (more) output]'\n\t\t;;\n\n\t\t(options)\n\t\t\tcase $line[1] in\n\n\t\t\t\t(start)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t-F'[Fetch from origin before performing finish]'\\\n\t\t\t\t\t\t':hotfix:__git_flow_version_list'\\\n\t\t\t\t\t\t':branch-name:__git_branch_names'\n\t\t\t\t;;\n\n\t\t\t\t(finish)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t-F'[Fetch from origin before performing finish]' \\\n\t\t\t\t\t\t-s'[Sign the release tag cryptographically]'\\\n\t\t\t\t\t\t-u'[Use the given GPG-key for the digital signature (implies -s)]'\\\n\t\t\t\t\t\t-m'[Use the given tag message]'\\\n\t\t\t\t\t\t-p'[Push to $ORIGIN after performing finish]'\\\n\t\t\t\t\t\t-k'[Keep branch after performing finish]'\\\n\t\t\t\t\t\t-n\"[Don't tag this release]\"\\\n\t\t\t\t\t\t':hotfix:__git_flow_hotfix_list'\n\t\t\t\t;;\n\n\t\t\t\t*)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t-v'[Verbose (more) output]'\n\t\t\t\t;;\n\t\t\tesac\n\t\t;;\n\tesac\n}\n\n__git-flow-feature ()\n{\n\tlocal curcontext=\"$curcontext\" state line\n\ttypeset -A opt_args\n\n\t_arguments -C \\\n\t\t':command:->command' \\\n\t\t'*::options:->options'\n\n\tcase $state in\n\t\t(command)\n\n\t\t\tlocal -a subcommands\n\t\t\tsubcommands=(\n\t\t\t\t'start:Start a new feature branch.'\n\t\t\t\t'finish:Finish a feature branch.'\n\t\t\t\t'list:List all your feature branches. (Alias to `git flow feature`)'\n\t\t\t\t'publish: publish'\n\t\t\t\t'track: track'\n\t\t\t\t'diff: diff'\n\t\t\t\t'rebase: rebase'\n\t\t\t\t'checkout: checkout'\n\t\t\t\t'pull: pull'\n\t\t\t)\n\t\t\t_describe -t commands 'git flow feature' subcommands\n\t\t\t_arguments \\\n\t\t\t\t-v'[Verbose (more) output]'\n\t\t;;\n\n\t\t(options)\n\t\t\tcase $line[1] in\n\n\t\t\t\t(start)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t-F'[Fetch from origin before performing finish]'\\\n\t\t\t\t\t\t':feature:__git_flow_feature_list'\\\n\t\t\t\t\t\t':branch-name:__git_branch_names'\n\t\t\t\t;;\n\n\t\t\t\t(finish)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t-F'[Fetch from origin before performing finish]' \\\n\t\t\t\t\t\t-r'[Rebase instead of merge]'\\\n\t\t\t\t\t\t-k'[Keep branch after performing finish]'\\\n\t\t\t\t\t\t':feature:__git_flow_feature_list'\n\t\t\t\t;;\n\n\t\t\t\t(publish)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t':feature:__git_flow_feature_list'\\\n\t\t\t\t;;\n\n\t\t\t\t(track)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t':feature:__git_flow_feature_list'\\\n\t\t\t\t;;\n\n\t\t\t\t(diff)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t':branch:__git_flow_feature_list'\\\n\t\t\t\t;;\n\n\t\t\t\t(rebase)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t-i'[Do an interactive rebase]' \\\n\t\t\t\t\t\t':branch:__git_flow_feature_list'\n\t\t\t\t;;\n\n\t\t\t\t(checkout)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t':branch:__git_flow_feature_list'\\\n\t\t\t\t;;\n\n\t\t\t\t(pull)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t':remote:__git_remotes'\\\n\t\t\t\t\t\t':branch:__git_flow_feature_list'\n\t\t\t\t;;\n\n\t\t\t\t*)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t-v'[Verbose (more) output]'\n\t\t\t\t;;\n\t\t\tesac\n\t\t;;\n\tesac\n}\n\n__git_flow_version_list ()\n{\n\tlocal expl\n\tdeclare -a versions\n\n\tversions=(${${(f)\"$(_call_program versions git flow release list 2> /dev/null | tr -d ' |*')\"}})\n\t__git_command_successful || return\n\n\t_wanted versions expl 'version' compadd $versions\n}\n\n__git_flow_feature_list ()\n{\n\tlocal expl\n\tdeclare -a features\n\n\tfeatures=(${${(f)\"$(_call_program features git flow feature list 2> /dev/null | tr -d ' |*')\"}})\n\t__git_command_successful || return\n\n\t_wanted features expl 'feature' compadd $features\n}\n\n__git_remotes () {\n\tlocal expl gitdir remotes\n\n\tgitdir=$(_call_program gitdir git rev-parse --git-dir 2>/dev/null)\n\t__git_command_successful || return\n\n\tremotes=(${${(f)\"$(_call_program remotes git config --get-regexp '\"^remote\\..*\\.url$\"')\"}//#(#b)remote.(*).url */$match[1]})\n\t__git_command_successful || return\n\n\t# TODO: Should combine the two instead of either or.\n\tif (( $#remotes > 0 )); then\n\t\t_wanted remotes expl remote compadd $* - $remotes\n\telse\n\t\t_wanted remotes expl remote _files $* - -W \"($gitdir/remotes)\" -g \"$gitdir/remotes/*\"\n\tfi\n}\n\n__git_flow_hotfix_list ()\n{\n\tlocal expl\n\tdeclare -a hotfixes\n\n\thotfixes=(${${(f)\"$(_call_program hotfixes git flow hotfix list 2> /dev/null | tr -d ' |*')\"}})\n\t__git_command_successful || return\n\n\t_wanted hotfixes expl 'hotfix' compadd $hotfixes\n}\n\n__git_branch_names () {\n\tlocal expl\n\tdeclare -a branch_names\n\n\tbranch_names=(${${(f)\"$(_call_program branchrefs git for-each-ref --format='\"%(refname)\"' refs/heads 2>/dev/null)\"}#refs/heads/})\n\t__git_command_successful || return\n\n\t_wanted branch-names expl branch-name compadd $* - $branch_names\n}\n\n__git_command_successful () {\n\tif (( ${#pipestatus:#0} > 0 )); then\n\t\t_message 'not a git repository'\n\t\treturn 1\n\tfi\n\treturn 0\n}\n\nzstyle ':completion:*:*:git:*' user-commands flow:'description for foo'\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":20,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/jmuraski/.oh-my-zsh/plugins/git-flow/git-flow.plugin.zsh","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"f7914fe40c15b641e4cdb30cf1700fe682ae568e","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":7,"items":[{"id":10,"softTabs":true,"displayBuffer":{"id":11,"softWrapped":false,"editorWidthInChars":null,"scrollTop":246,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/jmuraski/.oh-my-zsh/templates/zshrc.jmuraski-template","tabLength":2,"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":16,"softTabs":true,"displayBuffer":{"id":17,"softWrapped":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/jmuraski/.oh-my-zsh/plugins/atom/atom.plugin.zsh","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":20,"softTabs":false,"displayBuffer":{"id":21,"softWrapped":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/jmuraski/.oh-my-zsh/plugins/git-flow/git-flow.plugin.zsh","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemUri":"/Users/jmuraski/.oh-my-zsh/plugins/git-flow/git-flow.plugin.zsh","focused":true,"deserializer":"Pane"},"activePaneId":7,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-shellscript","language-hyperlink","language-todo"],"deserializer":"Workspace"},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"packageStates":{"fuzzy-finder":{"/Users/jmuraski/.oh-my-zsh/templates/zshrc.jmuraski-template":1417542308370,"/Users/jmuraski/.oh-my-zsh/plugins/atom/atom.plugin.zsh":1417542398922,"/Users/jmuraski/.oh-my-zsh/plugins/git-flow/git-flow.plugin.zsh":1420231728592},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":376169},"tree-view":{"directoryExpansionStates":{".oh-my-zsh":{"lib":{},"log":{},"plugins":{"atom":{},"git-flow":{}}}},"selectedPath":"/Users/jmuraski/.oh-my-zsh/plugins/git-flow/git-flow.plugin.zsh","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":2064,"width":200}}}