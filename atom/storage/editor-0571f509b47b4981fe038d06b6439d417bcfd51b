{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":22,"width":1440,"height":874,"maximized":true},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"paths":["/Users/jmuraski/Documents/workspace/remoteinsights/Simulator"],"buffers":[{"text":"# Remote Insights Simulator\n\n## Setup\n```bash\nnpm install\n```\nInstall elements from the package.json\n\n```bash\nnpm link\n```\nwill link the command into your global npm then you can run\n\n```bash\nriSim\n```\nto run the simulator\n\n```bash\ngulp help\n```\nLists all gulp tasks\n\n\n## Development\nrun\n```bash\ngulp\n```\nthis will run the coffee compiler in watch mode\n\nin seperate window run\n``` bash\nnpm run watch\n```\nthis will run the tests in watch mode\n\nto run the tests just once you can run\n```bash\nnpm test\n```\n","markers":{"markers":{"1":{"id":1,"range":[[16,20],[16,20]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":156,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"},"568":{"id":568,"range":[[2,0],[2,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"569":{"id":569,"range":[[4,0],[4,11]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"570":{"id":570,"range":[[9,0],[18,7]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"571":{"id":571,"range":[[23,0],[40,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/jmuraski/Documents/workspace/remoteinsights/Simulator/README.md","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"4208dc69dcf8161dd3f4d5dfbccc6a2b8ea23e23","deserializer":"TextBuffer"},{"text":"beaconBytes = require \"../lib/beaconBytes\"\nbytesHelper = require \"../lib/bytesHelper\"\n\ndescribe \"beaconBytes\", ()->\n  describe \"createStatusBytes\", ()->\n    motion = true\n    batteryLevel = 3\n    sequenceValue = 12\n\n    returnByte = {}\n\n    beforeEach ()->\n      returnByte = beaconBytes.createStatusBytes(motion, batteryLevel, sequenceValue)\n\n    it \"should return an number\", ()->\n      expect(returnByte).toBeDefined()\n      expect(returnByte).not.toBeNull()\n      expect(isNaN(returnByte)).toBe(false)\n\n    it \"should encode the motion byte\", ()->\n      expect(returnByte).toBe(103)\n      expect(beaconBytes.createStatusBytes(!motion, batteryLevel, sequenceValue)).toBe(102)\n\n    it \"should encode the battery level\", ()->\n      expect(returnByte).toBe(103)\n      expect(beaconBytes.createStatusBytes(motion, 2, sequenceValue)).toBe(101)\n      expect(beaconBytes.createStatusBytes(motion, 1, sequenceValue)).toBe(99)\n      expect(beaconBytes.createStatusBytes(motion, 0, sequenceValue)).toBe(97)\n\n    it \"should encode the sequence\", ()->\n      expect(returnByte).toBe(103)\n      expect(beaconBytes.createStatusBytes(motion, batteryLevel, 0)).toBe(7)\n      expect(beaconBytes.createStatusBytes(motion, batteryLevel, 31)).toBe(3873)\n\n    it \"should have an error if sequence is out of range\", ()->\n      pending()\n\n    it \"should have an error if battery level is out of range\", ()->\n      pending()\n\n  describe \"createBeaconBufferArray\", ()->\n    initialCharacter = \"<\"\n    beaconId = 1111132\n    motion = true\n    batteryLevel = 3\n    sequenceValue = 12\n    signalStrength = \"-50\"\n    endCharacter = \">\"\n\n    returnArray = {}\n\n    beforeEach ()->\n      returnArray = beaconBytes.createBeaconBufferArray(initialCharacter, beaconId, motion, batteryLevel, sequenceValue, signalStrength, endCharacter)\n\n    it \"should return an array\", ()->\n      expect(returnArray).not.toBeNull()\n      expect(Object.prototype.toString.call(returnArray)).toBe(\"[object Array]\")\n\n    it \"should start with the initial character\", ()->\n      expect(returnArray[0]).toBe(60)\n\n    it \"should end with the end character\", ()->\n      expect(returnArray[6]).toBe(62)\n\n    it \"should set the beacon id bytes\", ()->\n      spyOn(bytesHelper, \"convertNumberToHexByteArray\").and.returnValue([1, 2, 3])\n      returnArray = beaconBytes.createBeaconBufferArray(initialCharacter, beaconId, motion, batteryLevel, sequenceValue, signalStrength, endCharacter)\n      expect(bytesHelper.convertNumberToHexByteArray).toHaveBeenCalledWith(beaconId, 3)\n      expect(returnArray[1]).toBe(1)\n      expect(returnArray[2]).toBe(2)\n      expect(returnArray[3]).toBe(3)\n\n    it \"should set the status bytes\", ()->\n      expect(returnArray[4]).toBe(103)\n\n    it \"should set the signal strength\", ()->\n      expect(returnArray[5]).toBe('-50')\n","markers":{"markers":{"1":{"id":1,"range":[[35,15],[35,15]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":162,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"},"6":{"id":6,"range":[[35,14],[35,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"7":{"id":7,"range":[[35,13],[35,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/jmuraski/Documents/workspace/remoteinsights/Simulator/spec/beaconBytes-spec.coffee","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"0df87546837b00bf18b3b1aafd3e66d6a5587927","deserializer":"TextBuffer"},{"text":"// Generated by CoffeeScript 1.7.1\n(function() {\n  var batteryLevel, beaconBufferArray, beaconBytes, beaconDataEndCharacter, beaconDataStartCharacter, beaconId, buffer, endTransmissionValue, err, foo, gatewayBufferArray, gatewayBytes, gatewayHeaderStartCharacter, gatewayId, host, length, logLevel, logger, messageArray, motion, net, parseList, pkg, port, program, sequenceValue, signalStrength, socket, transmissionType, winston;\n\n  program = require(\"commander\");\n\n  pkg = require(\"../package.json\");\n\n  gatewayBytes = require(\"./gatewayBytes\");\n\n  beaconBytes = require(\"./beaconBytes\");\n\n  net = require(\"net\");\n\n  winston = require(\"winston\");\n\n  parseList = function(val) {\n    var array, item, returnArray, _i, _len;\n    logger.debug(\"In parseList with \" + val);\n    array = [];\n    logger.debug(\"Val is \" + (typeof val) + \" with value \" + val);\n    if (val.indexOf(\",\") !== -1) {\n      logger.debug(\"Splitting Val\");\n      array = val.split(',');\n    } else {\n      logger.debug(\"not Splitting val\");\n      array = [val];\n    }\n    returnArray = [];\n    for (_i = 0, _len = array.length; _i < _len; _i++) {\n      item = array[_i];\n      logger.debug(\"adding item to return array \" + item + \" as \" + (parseInt(item)));\n      returnArray.push(parseInt(item));\n    }\n    return returnArray;\n  };\n\n  program.version(pkg.version).option(\"-h, --host [host]\", \"Host Name to send the value.\", 'localhost').option(\"-p --port <port>\", \"Port to send the value.\", \"9999\").option(\"-g --gateway <gateway>\", \"The gateway ID to send the message from.\", \"101010\").option(\"-b --beacon <beacons>\", \"The beacon ID to send the message from\", parseList, [1111132]).option(\"-s --signal <signal>\", \"The signal strength to send for the beacons\", \"-50\").option(\"-l --log-level <logLevel>\", \"The level to be logging at\", \"error\");\n\n  program.on(\"--help\", function() {\n    console.log(\"  Examples:\");\n    console.log(\"\");\n    console.log(\"    $ \" + pkg.name + \" --message hello\");\n  });\n\n  program.parse(process.argv);\n\n  host = program.host;\n\n  port = parseInt(program.port);\n\n  gatewayId = program.gateway;\n\n  beaconId = program.beacon[0];\n\n  gatewayHeaderStartCharacter = ':';\n\n  beaconDataStartCharacter = '<';\n\n  beaconDataEndCharacter = '>';\n\n  transmissionType = 0x01;\n\n  motion = true;\n\n  batteryLevel = 3;\n\n  sequenceValue = 0;\n\n  signalStrength = parseInt(program.signal);\n\n  endTransmissionValue = 0x0d;\n\n  logLevel = program.logLevel;\n\n  winston.setLevels({\n    trace: 0,\n    debug: 1,\n    info: 2,\n    warn: 3,\n    error: 4\n  });\n\n  winston.addColors({\n    debug: 'green',\n    info: 'cyan',\n    warn: 'yellow',\n    error: 'red'\n  });\n\n  winston.remove(winston.transports.Console);\n\n  winston.add(winston.transports.Console, {\n    level: logLevel,\n    colorize: true\n  });\n\n  logger = winston;\n\n  logger.debug(\"host \" + host);\n\n  logger.debug(\"port \" + port);\n\n  logger.debug(\"gateway \" + gatewayId);\n\n  logger.debug(\"beacon \" + beaconId);\n\n  logger.debug(\"signal \" + signalStrength);\n\n  logger.debug(\"logLevel: \" + logLevel);\n\n  try {\n    logger.debug(\"calling Gateway Bytes\");\n    gatewayBufferArray = gatewayBytes.createGatewayBufferArray(gatewayHeaderStartCharacter, gatewayId, transmissionType);\n    logger.debug(\"RI - value returned: \" + gatewayBytes);\n    logger.debug(\"calling beacon Bytes\");\n    beaconBufferArray = beaconBytes.createBeaconBufferArray(beaconDataStartCharacter, beaconId, motion, batteryLevel, sequenceValue, signalStrength, beaconDataEndCharacter);\n    length = beaconBufferArray.length;\n    logger.debug(\"Length: \" + length);\n    gatewayBufferArray.push(length);\n    foo = gatewayBufferArray.concat(beaconBufferArray);\n    logger.debug(\"g: \" + gatewayBufferArray);\n    logger.debug(\"b: \" + beaconBufferArray);\n    messageArray = (gatewayBufferArray.concat(beaconBufferArray)).concat([endTransmissionValue]);\n    logger.debug(\"messageArray: \" + messageArray);\n    buffer = new Buffer(messageArray, \"ascii\");\n    socket = new net.Socket();\n    socket.connect(port, host);\n    socket.on(\"connect\", function() {\n      logger.debug(\"I am connected to 9999 localhost\");\n      return socket.write(buffer);\n    });\n    socket.on('end', function() {\n      return logger.debug(\"End of transmission\");\n    });\n    socket.on('close', function() {\n      return logger.debug(\"Socket is closed\");\n    });\n  } catch (_error) {\n    err = _error;\n    logger.debug(\"[\", \"node-cli-boilerplate\".white, \"]\", err.toString().red);\n  }\n\n}).call(this);\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":168},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/jmuraski/Documents/workspace/remoteinsights/Simulator/src/coffee/riSimulator.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"f1d23dcf9ed3aa08fb6240053a6f61893ff7048b","deserializer":"TextBuffer"},{"text":"program = require \"commander\"\npkg = require \"../package.json\"\ngatewayBytes = require \"./gatewayBytes\"\nbeaconBytes = require \"./beaconBytes\"\nnet = require \"net\"\nwinston = require \"winston\"\n\nparseList = (val) ->\n\tarray = []\n\tif (val.indexOf(\",\") != -1)\n\t\tarray = val.split(',')\n\telse\n\t\tarray = [val]\n\treturnArray = []\n\tfor item in array\n\t\treturnArray.push(parseInt(item))\n\treturn returnArray\n\n\nprogram\n\t.version(pkg.version)\n\t.option \"-h, --host [host]\", \"Host Name to send the value.\", 'localhost'\n\t.option \"-p --port <port>\", \"Port to send the value.\", \"9999\"\n\t.option \"-g --gateway <gateway>\", \"The gateway ID to send the message from.\", \"101010\"\n\t.option \"-b --beacon <beacons>\", \"The beacon ID to send the message from\", parseList , [1111132]\n\t.option \"-s --signal <signal>\", \"The signal strength to send for the beacons\", \"-50\"\n\t.option \"-l --log-level <logLevel>\", \"The level to be logging at\", \"error\"\n\nprogram.on \"--help\", ->\n\tconsole.log \"  Examples:\"\n\tconsole.log \"\"\n\tconsole.log \"    $ \" + pkg.name + \" --message hello\"\n\treturn\n\nprogram.parse process.argv\n\nhost = program.host\nport = parseInt(program.port)\ngatewayId = program.gateway\nbeaconId = program.beacon[0]\ngatewayHeaderStartCharacter = ':'\nbeaconDataStartCharacter = '<'\nbeaconDataEndCharacter = '>'\ntransmissionType = 0x01\nmotion = true\nbatteryLevel = 3\nsequenceValue = 0\nsignalStrength = parseInt(program.signal)\nendTransmissionValue = 0x0d\nlogLevel = program.logLevel\n\nwinston.setLevels {\n\ttrace: 0\n\tdebug: 1\n\tinfo: 2\n\twarn: 3\n\terror: 4\n}\n\nwinston.addColors {\n\tdebug: 'green'\n\tinfo:  'cyan'\n\twarn:  'yellow'\n\terror: 'red'\n}\n\nwinston.remove(winston.transports.Console)\nwinston.add winston.transports.Console, {level: logLevel, colorize:true }\n\nlogger = winston\n\nlogger.debug(\"host #{host}\")\nlogger.debug(\"port #{port}\")\nlogger.debug(\"gateway #{gatewayId}\")\nlogger.debug(\"beacon #{beaconId}\")\nlogger.debug(\"signal #{signalStrength}\")\nlogger.debug(\"logLevel: #{logLevel}\")\n\ntry\n\tlogger.debug(\"calling Gateway Bytes\")\n\tgatewayBufferArray = gatewayBytes.createGatewayBufferArray(gatewayHeaderStartCharacter, gatewayId, transmissionType)\n\tlogger.debug(\"RI - value returned: #{gatewayBytes}\")\n\tlogger.debug(\"calling beacon Bytes\")\n\tbeaconBufferArray = beaconBytes.createBeaconBufferArray(beaconDataStartCharacter, beaconId, motion, batteryLevel, sequenceValue, signalStrength, beaconDataEndCharacter)\n\tlength = beaconBufferArray.length\n\tlogger.debug(\"Length: #{length}\")\n\tgatewayBufferArray.push(length)\n\tfoo = gatewayBufferArray.concat beaconBufferArray\n\tlogger.debug(\"g: #{gatewayBufferArray}\")\n\tlogger.debug(\"b: #{beaconBufferArray}\")\n\tmessageArray = (gatewayBufferArray.concat beaconBufferArray).concat [endTransmissionValue]\n\tlogger.debug(\"messageArray: #{messageArray}\")\n\tbuffer = new Buffer(messageArray, \"ascii\")\n\tsocket = new net.Socket()\n\tsocket.on 'error', (err)->\n\t\tlogger.error \"Could not connect to #{host} on port #{port}\"\n\t\tlogger.error err\n\tsocket.connect(port, host)\n\tsocket.on \"connect\", ()->\n\t\tlogger.debug \"Connected to #{host} on port #{port}\"\n\t\tsocket.write(buffer)\n\tsocket.on 'end', ()->\n\t\tlogger.debug \"End of transmission\"\n\tsocket.on 'close', ()->\n\t\tlogger.debug \"Socket is closed\"\n\ncatch err\n\tlogger.debug \"[\", \"node-cli-boilerplate\".white, \"]\", err.toString().red\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":172},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/jmuraski/Documents/workspace/remoteinsights/Simulator/src/coffee/riSimulator.coffee","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"5e77f120bd8042c30a1627b03fe5abe5d8b3914a","deserializer":"TextBuffer"},{"text":"// Generated by CoffeeScript 1.7.1\n(function() {\n  var bytesHelper, logger;\n\n  bytesHelper = require(\"./bytesHelper\");\n\n  logger = require(\"winston\");\n\n  module.exports = {\n    createGatewayBufferArray: function(initalCharacter, gatewayIdString, transmissionType) {\n      var bufferArray, gatewayHexArray;\n      gatewayHexArray = [];\n      gatewayHexArray.push(parseInt(gatewayIdString.substring(0, 2), 16));\n      gatewayHexArray.push(parseInt(gatewayIdString.substring(2, 4), 16));\n      gatewayHexArray.push(parseInt(gatewayIdString.substring(4, 6), 16));\n      gatewayHexArray = gatewayHexArray.reverse();\n      logger.debug(\"Hex Array: \" + gatewayHexArray);\n      bufferArray = [initalCharacter.charCodeAt()].concat(gatewayHexArray);\n      logger.debug(\"BufferArray: \" + bufferArray);\n      bufferArray.push(transmissionType);\n      logger.debug(\"BufferArray with TranmissionType: \" + bufferArray);\n      return bufferArray;\n    }\n  };\n\n}).call(this);\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":176},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/jmuraski/Documents/workspace/remoteinsights/Simulator/src/coffee/gatewayBytes.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"b7acf199983f2387768e9edcbd24f3a95476276b","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":7,"items":[{"id":156,"softTabs":true,"displayBuffer":{"id":157,"softWrapped":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/jmuraski/Documents/workspace/remoteinsights/Simulator/README.md","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":162,"softTabs":true,"displayBuffer":{"id":163,"softWrapped":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/jmuraski/Documents/workspace/remoteinsights/Simulator/spec/beaconBytes-spec.coffee","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":168,"softTabs":true,"displayBuffer":{"id":169,"softWrapped":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/jmuraski/Documents/workspace/remoteinsights/Simulator/src/coffee/riSimulator.js","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":172,"softTabs":false,"displayBuffer":{"id":173,"softWrapped":false,"editorWidthInChars":null,"scrollTop":1107,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/jmuraski/Documents/workspace/remoteinsights/Simulator/src/coffee/riSimulator.coffee","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":176,"softTabs":true,"displayBuffer":{"id":177,"softWrapped":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/jmuraski/Documents/workspace/remoteinsights/Simulator/src/coffee/gatewayBytes.js","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemURI":"/Users/jmuraski/Documents/workspace/remoteinsights/Simulator/src/coffee/gatewayBytes.js","focused":false,"deserializer":"Pane"},"activePaneId":7,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-gfm","language-coffee-script","language-javascript","language-hyperlink","language-todo"],"deserializer":"Workspace"},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"packageStates":{"fuzzy-finder":{"/Users/jmuraski/Documents/workspace/remoteinsights/Simulator/README.md":1418072343332,"/Users/jmuraski/Documents/workspace/remoteinsights/Simulator/spec/beaconBytes-spec.coffee":1423671966690,"/Users/jmuraski/Documents/workspace/remoteinsights/Simulator/src/coffee/riSimulator.js":1423671979216,"/Users/jmuraski/Documents/workspace/remoteinsights/Simulator/src/coffee/riSimulator.coffee":1423671979914,"/Users/jmuraski/Documents/workspace/remoteinsights/Simulator/src/coffee/gatewayBytes.js":1423672014551},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":9093683},"tree-view":{"directoryExpansionStates":{"src":{"coffee":{}}},"selectedPath":"/Users/jmuraski/Documents/workspace/remoteinsights/Simulator/src/coffee/gatewayBytes.js","hasFocus":true,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200},"find-and-replace":{"viewState":"","modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false},"projectViewState":"","resultsModelState":{"useRegex":false,"caseSensitive":false},"findHistory":["console.log"],"replaceHistory":["logger.debug"],"pathsHistory":["logger.debug"]}}}